[{"content":"Pourquoi Rust ? Je suis développeur PHP depuis plusieurs années. J’ai aussi travaillé avec JavaScript et Ruby dans un cadre professionnel.\nMais depuis quelque temps, je ressentais le besoin d’élargir mes compétences et d’aller vers un langage plus bas niveau, plus exigeant.\nJe me suis donc demandé : quel langage pourrait vraiment me bousculer dans ma façon de coder, tout en m’apportant quelque chose de solide, à la fois personnellement et professionnellement ?\nC’est comme ça que je suis tombé sur Rust.\nRust m’a séduit pour plusieurs raisons :\nSon exigence, qui en fait un langage formateur. Sa promesse de sécurité mémoire, une dimension que je n’ai pas vraiment rencontrée avec PHP. Sa montée en popularité et son rôle grandissant dans des domaines qui m’intéressent, comme la cryptomonnaie. En clair : Rust semblait être exactement ce que je cherchais, un langage différent de tout ce que je connais déjà.\nPremières impressions L’installation a été plutôt simple. Si on est déjà un peu à l’aise avec le terminal, rustup facilite vraiment la vie : il permet de mettre à jour facilement son environnement et de rester sur la dernière version.\nEnsuite il y a Cargo, qui gère la création de projets, la compilation, les tests… un vrai petit couteau suisse.\nJ’ai aussi installé les extensions VS Code. Pour l’instant elles sont encore limitées, mais ça suffit largement pour commencer à coder sereinement.\nCôté langage, la syntaxe est claire, mais quand on vient de PHP, ça demande un temps d’adaptation. Ce qui me perturbe le plus, ce n’est pas tant la syntaxe que la structure des applications.\nJe passe d’un monde très orienté POO (classes, héritage, interfaces) à quelque chose de beaucoup plus sobre, basé sur des struct et des trait. C’est une autre manière de penser son code.\nLe typage fort : une claque Un autre point qui m’a marqué, c’est le typage fort de Rust.\nLà où en PHP on a longtemps été habitués à une certaine souplesse (voire du \u0026ldquo;laisser-faire\u0026rdquo; côté types), Rust ne pardonne rien. Chaque variable, chaque retour de fonction, chaque conversion doit être clair et explicite.\nAu début, c’est un peu violent : je me retrouve à bloquer sur des choses toutes simples, comme additionner deux valeurs qui ne sont pas exactement du même type numérique (i32 vs u32, par exemple).\nMais je comprends que cette rigueur est volontaire : elle force à réfléchir dès maintenant à la cohérence des données, plutôt que de découvrir des bugs plus tard à l’exécution.\nC’est déroutant, oui, mais c’est aussi formateur. Ça me fait revoir des habitudes de développeur que j’avais un peu trop prises pour acquises.\nEntre excitation et frustration Beaucoup de notions restent floues pour moi pour l’instant : ownership, borrowing, lifetimes… je comprends les grandes lignes, mais pas encore en profondeur.\nC’est à la fois grisant et frustrant. Grisant, parce que j’ai l’impression d’ouvrir une nouvelle porte dans ma façon de concevoir le code. Frustrant, parce que parfois je bloque sur des choses qui me semblent \u0026ldquo;évidentes\u0026rdquo; dans d’autres langages.\nMais je sais que ce genre de difficultés fait partie du processus. Et je sens que Rust va m’obliger à être plus rigoureux, plus attentif à la logique de mon code.\n👉 Voilà mon jour 1 avec Rust.\nUn mélange de curiosité, de doute et de motivation. La suite, ce sera de continuer à me confronter au langage, petit projet après petit projet, pour voir comment toutes ces notions s’imbriquent vraiment.\n","permalink":"http://localhost:1313/blog/journal/rust-jour-1/","summary":"\u003ch2 id=\"pourquoi-rust-\"\u003ePourquoi Rust ?\u003c/h2\u003e\n\u003cp\u003eJe suis développeur PHP depuis plusieurs années. J’ai aussi travaillé avec JavaScript et Ruby dans un cadre professionnel.\u003cbr\u003e\nMais depuis quelque temps, je ressentais le besoin d’élargir mes compétences et d’aller vers un langage plus bas niveau, plus exigeant.\u003c/p\u003e\n\u003cp\u003eJe me suis donc demandé : quel langage pourrait vraiment me bousculer dans ma façon de coder, tout en m’apportant quelque chose de solide, à la fois personnellement et professionnellement ?\u003cbr\u003e\nC’est comme ça que je suis tombé sur \u003cstrong\u003eRust\u003c/strong\u003e.\u003c/p\u003e","title":"Mes premiers pas avec Rust - Jour 1"},{"content":"Les ORM (Object–Relational Mappers) facilitent la manipulation des bases SQL via des objets.\nIls promettent de réduire la \u0026ldquo;distance\u0026rdquo; entre code et données, mais chaque approche vient avec des compromis.\nCertains développeurs adorent les ORM pour leur rapidité, d’autres les fuient pour garder le contrôle total sur leurs requêtes.\n👉 Alors, quels sont les différents types d’ORM ? Quels avantages réels offrent-ils, et quelles illusions faut-il éviter ?\n1. 🔗 Active Record Définition Le modèle Active Record couple directement l’objet métier à la persistance.\nChaque entité sait se sauvegarder (save()), se mettre à jour (update()), se supprimer (delete()).\nExemple de code (PHP / Eloquent) class User extends Model { // Hérite de save(), update(), delete() } $user = new User(); $user-\u0026gt;name = \u0026#34;Alice\u0026#34;; $user-\u0026gt;save(); // INSERT INTO users ... ✅ Avantages Rapide à prendre en main (idéal pour un CRUD) Syntaxe expressive : User::where('email', $mail)-\u0026gt;first() Parfait pour un MVP ou un projet court ❌ Inconvénients Couplage fort entre métier et base Tests unitaires compliqués Devient vite un frein dans des domaines complexes Opinion Active Record est séduisant pour démarrer vite, mais il vieillit mal dès que le projet grossit. À long terme, la logique métier finit piégée dans les modèles.\n2. 🧠 Data Mapper Définition Le Data Mapper sépare totalement les entités métier de la base. L’entité est pure (sans save()), et un Mapper / Repository gère la persistance.\nExemple de code (PHP / Doctrine) #[Entity] class User { public function __construct( private string $email, private string $name ) {} } $user = new User(\u0026#34;alice@mail.com\u0026#34;, \u0026#34;Alice\u0026#34;); $entityManager-\u0026gt;persist($user); $entityManager-\u0026gt;flush(); ✅ Avantages Respect du SRP : entités testables et métier pur Compatible avec une approche DDD Gestion avancée : relations, UnitOfWork, lazy loading ❌ Inconvénients Mise en place complexe Mapping souvent verbeux (annotations, YAML, XML) Demande une architecture claire Opinion Le Data Mapper est l’approche la plus robuste et scalable, mais aussi la plus lourde. C’est un investissement rentable si le projet vise le long terme.\n3. 🏛️ Repository Pattern (au-delà des ORM) Définition Le Repository Pattern n’est pas un ORM, mais une surcouche architecturale (DDD). Il permet de cacher totalement la persistance derrière des repositories métiers.\nExemple de code (PHP / sur Doctrine) class UserRepository { public function findByEmail(string $email): ?User { // la requête Doctrine est encapsulée ici } } ✅ Avantages Méthodes métier lisibles : UserRepository::findByEmail() Encapsulation forte → ORM invisible pour le domaine Facile à tester / mocker ❌ Inconvénients Demande une vraie discipline d’équipe Plus lent à mettre en œuvre qu’un Active Record Opinion Le Repository Pattern est une bonne pratique DDD, mais ce n’est pas un ORM. C’est une couche d’abstraction supplémentaire, à ajouter uniquement si le métier le justifie.\n4. 🔧 Micro-ORM Définition Les Micro-ORM offrent un mapping minimaliste (objets ↔ SQL), sans surcouche complexe. Ils laissent au développeur le contrôle des requêtes.\nExemple de code (PHP / Medoo) $database = new Medoo([\u0026#39;database_type\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, ...]); $database-\u0026gt;insert(\u0026#34;users\u0026#34;, [\u0026#34;name\u0026#34; =\u0026gt; \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34; =\u0026gt; \u0026#34;alice@mail.com\u0026#34;]); $user = $database-\u0026gt;get(\u0026#34;users\u0026#34;, \u0026#34;*\u0026#34;, [\u0026#34;id\u0026#34; =\u0026gt; 1]); ✅ Avantages Ultra rapide, léger Pas de magie cachée Idéal pour microservices ou scripts CLI ❌ Inconvénients Relations gérées à la main Pas adapté aux gros projets métier Peu d’automatisation Opinion Un Micro-ORM est parfait si tu veux maîtriser ton SQL tout en gagnant un peu de confort. Mais il ne protège pas des erreurs de conception côté métier.\n🔚 Synthèse comparative Type Couplage entité–ORM Friendly DDD Complexité Exemples Active Record 🔴 Très fort ❌ 🟢 Faible Eloquent, Rails Data Mapper 🟢 Faible 🟡 Moyen 🔴 Élevée Doctrine, Hibernate Repository 🟢 Très faible ✅ ✅ ✅ 🔴 Élevée Surcouche DDD Micro-ORM 🟢 Faible ❌ 🟢 Faible Dapper, Medoo, Atlas 🚀 Conclusion 👉 Active Record : parfait pour démarrer vite, mais dangereux à long terme.\n👉 Data Mapper : lourd mais robuste, le choix des projets ambitieux.\n👉 Repository Pattern : pas un ORM, mais une bonne pratique DDD.\n👉 Micro-ORM : idéal si tu veux garder le SQL sous contrôle, sans magie inutile.\n🔎 Mon conseil : choisis l’ORM en fonction de ton horizon projet :\nPrototype ou side-project → Active Record / Micro-ORM Application métier durable → Data Mapper + Repository Pattern En clair : il n’y a pas de solution universelle, seulement des compromis.\n","permalink":"http://localhost:1313/blog/articles/type-orm/","summary":"Active Record, Data Mapper, Repository, Micro-ORM : découvrez leurs forces, limites et exemples pratiques pour choisir la bonne approche ORM selon votre projet.","title":"Comprendre les différents types d’ORM"},{"content":"Introduction On entend régulièrement que certains pays « censurent Internet ». Le terme fait peur, il évoque un réseau coupé, des contenus effacés, une liberté supprimée.\nMais est-ce seulement possible sur le plan technique ? Internet a été conçu dès son origine comme un réseau décentralisé, pensé pour résister aux coupures, aux pannes et même à la guerre.\nEn réalité, ce que l’on appelle « censure d’Internet » n’est pas une censure du réseau lui-même, mais un contrôle de l’accès à certaines ressources. Et même là, ces tentatives sont rarement efficaces à long terme.\nCensure vs. limitation d’accès Il faut distinguer deux notions :\nCensure totale : l’information n’existe plus, elle est supprimée à la source. Limitation d’accès : l’information existe toujours, mais l’utilisateur est empêché d’y accéder par des barrières techniques. 👉 Sur Internet, seule la seconde est possible. On ne peut pas « effacer » une page du web mondial. Au mieux, on peut empêcher un internaute d’y accéder depuis un point donné du réseau.\nComment les États tentent de contrôler Internet Plusieurs techniques existent :\nBlocage DNS : rediriger ou neutraliser les requêtes de résolution de nom (par ex. empêcher discord.com de répondre). Blocage IP ou filtrage BGP : couper l’accès à certaines adresses ou détourner le routage. Inspection profonde des paquets (DPI) : analyser le trafic en détail pour bloquer des protocoles ou services. Coupures massives : désactiver des réseaux mobiles ou des câbles sous-marins (ex. Égypte 2011). Toutes ces méthodes ont en commun une chose : elles agissent au niveau national, pas sur Internet dans son ensemble.\nExemple : la censure ratée de Discord en Russie En 2017, la Russie a tenté de bloquer Discord, l’application de messagerie prisée par les communautés de joueurs.\nLe blocage a été mis en place via des restrictions d’adresses IP et des filtrages DNS. Mais le résultat a été… un échec.\nLes utilisateurs russes ont très vite trouvé des moyens de contournement : VPN, proxies, et même de simples changements de DNS publics (comme ceux de Google ou Cloudflare).\nAu bout de quelques mois, la mesure a été abandonnée, car elle était devenue inefficace et impopulaire.\nCet épisode illustre bien la réalité : empêcher l’accès à une plateforme est temporaire, et la résilience des utilisateurs finit toujours par gagner.\nLes moyens de contournement Internet étant conçu comme un réseau résilient et distribué, chaque tentative de blocage trouve rapidement une parade. Parmi les plus utilisées :\n1. Les VPN (Virtual Private Network) Les VPN chiffrent la connexion et la redirigent via un serveur situé dans un autre pays.\nIls contournent les blocages DNS et IP. Ils rendent difficile l’analyse du trafic (DPI). Leur usage est devenu massif dans les pays soumis à des restrictions (Russie, Turquie, Iran). 2. Le réseau Tor Tor (« The Onion Router ») repose sur un routage en couches chiffrées.\nPermet d’accéder à Internet de manière anonyme. Contourne la plupart des filtrages nationaux. Souvent ciblé par les États… mais il continue de fonctionner grâce à ses nœuds relais cachés. 3. Les DNS publics et chiffrés Changer de serveur DNS (Google, Cloudflare, Quad9…) permet de contourner les blocages locaux.\nAvec DoH (DNS over HTTPS) ou DoT (DNS over TLS), même l’opérateur ne peut plus filtrer les requêtes de noms de domaine. 4. Les proxies et tunnels Des serveurs intermédiaires ou des outils comme SSH tunneling permettent de rediriger le trafic et de masquer son origine.\nMoins sécurisés qu’un VPN, mais rapides à mettre en place. 5. Les réseaux alternatifs En cas de coupure totale, des solutions émergent :\nInternet par satellite (ex. Starlink en Ukraine). Réseaux mesh (maillage local via Wi-Fi/Bluetooth). Radio amateur et SMS-gateways pour transmettre de petits volumes d’informations. Les limites de la censure technique Les contournements sont accessibles même à des utilisateurs non experts. Plus un pays tente de bloquer, plus sa population apprend à contourner. La censure a souvent des effets de bord : coupures de services tiers, ralentissements, mécontentement social. En pratique, aucune barrière technique n’est durable : tôt ou tard, un chemin de traverse apparaît.\nLes rares cas de contrôle quasi-total Il existe toutefois quelques exceptions :\nChine : le « Grand Firewall » contrôle les backbones et surveille l’ensemble des flux. Corée du Nord : Internet est inaccessible à la majorité de la population, remplacé par un intranet national. Iran : des coupures massives sont régulièrement imposées lors de crises politiques. Ces cas restent rares, car ils nécessitent une centralisation complète des infrastructures nationales. La plupart des pays n’ont pas cette architecture.\nConclusion Peut-on censurer Internet ? Non.\nOn peut limiter l’accès à certaines parties du réseau, parfois de manière sévère, mais le réseau lui-même échappe à toute censure globale.\nLes tentatives de blocage montrent toujours la même chose : dès qu’un utilisateur a le moindre accès, il a aussi les moyens de contourner.\nInternet, par sa conception, reste un espace résilient — et cela explique pourquoi la « censure » dont on parle souvent n’est, au fond, qu’un contrôle partiel et temporaire.\n","permalink":"http://localhost:1313/blog/articles/censurer-internet/","summary":"On parle souvent de censure d’Internet. Mais techniquement, est-elle seulement possible ?","title":"Peut-on vraiment censurer Internet ?"}]